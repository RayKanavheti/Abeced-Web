#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for CardRevision.
    /// </summary>
    public static partial class CardRevisionExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.CardRevision GetByKey(this IQueryable<Abeced.Data.CardRevision> queryable
            , System.String revisionId
            )
        {
            return queryable
                .Where(c => c.RevisionId == revisionId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.RevisionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionId">RevisionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByRevisionId(this IQueryable<Abeced.Data.CardRevision> queryable, System.String revisionId)
        {
            return queryable.Where(c => c.RevisionId == revisionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.RevisionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionId">RevisionId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByRevisionId(this IQueryable<Abeced.Data.CardRevision> queryable, ContainmentOperator containmentOperator, System.String revisionId)
        {
            if (revisionId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("revisionId", "Parameter 'revisionId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.RevisionId.Contains(revisionId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.RevisionId.StartsWith(revisionId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.RevisionId.EndsWith(revisionId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.RevisionId.Contains(revisionId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.RevisionId != revisionId);
                default:
                    return queryable.Where(c => c.RevisionId == revisionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.RevisionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionId">RevisionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByRevisionId(this IQueryable<Abeced.Data.CardRevision> queryable, System.String revisionId, params System.String[] additionalValues)
        {
            var revisionIdList = new List<System.String> { revisionId };

            if (additionalValues != null)
                revisionIdList.AddRange(additionalValues);

            if (revisionIdList.Count == 1)
                return queryable.ByRevisionId(revisionIdList[0]);

            return queryable.ByRevisionId(revisionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.RevisionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByRevisionId(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.RevisionId));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.XmlCarddetails"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xmlCarddetails">XmlCarddetails to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByXmlCarddetails(this IQueryable<Abeced.Data.CardRevision> queryable, System.String xmlCarddetails)
        {
            // support nulls
            return xmlCarddetails == null 
                ? queryable.Where(c => c.XmlCarddetails == null) 
                : queryable.Where(c => c.XmlCarddetails == xmlCarddetails);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.XmlCarddetails"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xmlCarddetails">XmlCarddetails to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByXmlCarddetails(this IQueryable<Abeced.Data.CardRevision> queryable, ContainmentOperator containmentOperator, System.String xmlCarddetails)
        {
            if (xmlCarddetails == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("xmlCarddetails", "Parameter 'xmlCarddetails' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.XmlCarddetails.Contains(xmlCarddetails));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.XmlCarddetails.StartsWith(xmlCarddetails));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.XmlCarddetails.EndsWith(xmlCarddetails));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.XmlCarddetails.Contains(xmlCarddetails) == false);
                case ContainmentOperator.NotEquals:
                    return xmlCarddetails == null 
                        ? queryable.Where(c => c.XmlCarddetails != null) 
                        : queryable.Where(c => c.XmlCarddetails != xmlCarddetails);
                default:
                    return xmlCarddetails == null 
                        ? queryable.Where(c => c.XmlCarddetails == null) 
                        : queryable.Where(c => c.XmlCarddetails == xmlCarddetails);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.XmlCarddetails"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xmlCarddetails">XmlCarddetails to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByXmlCarddetails(this IQueryable<Abeced.Data.CardRevision> queryable, System.String xmlCarddetails, params System.String[] additionalValues)
        {
            var xmlCarddetailsList = new List<System.String> { xmlCarddetails };

            if (additionalValues != null)
                xmlCarddetailsList.AddRange(additionalValues);
            else
                xmlCarddetailsList.Add(null);

            if (xmlCarddetailsList.Count == 1)
                return queryable.ByXmlCarddetails(xmlCarddetailsList[0]);

            return queryable.ByXmlCarddetails(xmlCarddetailsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.XmlCarddetails"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByXmlCarddetails(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("XmlCarddetails", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.UpdateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateDate">UpdateDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByUpdateDate(this IQueryable<Abeced.Data.CardRevision> queryable, System.DateTime? updateDate)
        {
            // support nulls
            return updateDate == null 
                ? queryable.Where(c => c.UpdateDate == null) 
                : queryable.Where(c => c.UpdateDate == updateDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.UpdateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateDate">UpdateDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByUpdateDate(this IQueryable<Abeced.Data.CardRevision> queryable, ComparisonOperator comparisonOperator, System.DateTime? updateDate)
        {
            if (updateDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("updateDate", "Parameter 'updateDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.UpdateDate > updateDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.UpdateDate >= updateDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.UpdateDate < updateDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.UpdateDate <= updateDate);
                case ComparisonOperator.NotEquals:
                    return updateDate == null 
                        ? queryable.Where(c => c.UpdateDate != null) 
                        : queryable.Where(c => c.UpdateDate != updateDate);
                default:
                    return updateDate == null 
                        ? queryable.Where(c => c.UpdateDate == null) 
                        : queryable.Where(c => c.UpdateDate == updateDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.UpdateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateDate">UpdateDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByUpdateDate(this IQueryable<Abeced.Data.CardRevision> queryable, System.DateTime? updateDate, params System.DateTime?[] additionalValues)
        {
            var updateDateList = new List<System.DateTime?> { updateDate };

            if (additionalValues != null)
                updateDateList.AddRange(additionalValues);
            else
                updateDateList.Add(null);

            if (updateDateList.Count == 1)
                return queryable.ByUpdateDate(updateDateList[0]);

            return queryable.ByUpdateDate(updateDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.UpdateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByUpdateDate(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("UpdateDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Completed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completed">Completed to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCompleted(this IQueryable<Abeced.Data.CardRevision> queryable, System.Boolean? completed)
        {
            // support nulls
            return completed == null 
                ? queryable.Where(c => c.Completed == null) 
                : queryable.Where(c => c.Completed == completed);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Completed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completed">Completed to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCompleted(this IQueryable<Abeced.Data.CardRevision> queryable, ComparisonOperator comparisonOperator, System.Boolean? completed)
        {
            if (completed == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("completed", "Parameter 'completed' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return completed == null 
                        ? queryable.Where(c => c.Completed != null) 
                        : queryable.Where(c => c.Completed != completed);
                default:
                    return completed == null 
                        ? queryable.Where(c => c.Completed == null) 
                        : queryable.Where(c => c.Completed == completed);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Completed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completed">Completed to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCompleted(this IQueryable<Abeced.Data.CardRevision> queryable, System.Boolean? completed, params System.Boolean?[] additionalValues)
        {
            var completedList = new List<System.Boolean?> { completed };

            if (additionalValues != null)
                completedList.AddRange(additionalValues);
            else
                completedList.Add(null);

            if (completedList.Count == 1)
                return queryable.ByCompleted(completedList[0]);

            return queryable.ByCompleted(completedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Completed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCompleted(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("Completed", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.CompletedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completedDate">CompletedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCompletedDate(this IQueryable<Abeced.Data.CardRevision> queryable, System.DateTime? completedDate)
        {
            // support nulls
            return completedDate == null 
                ? queryable.Where(c => c.CompletedDate == null) 
                : queryable.Where(c => c.CompletedDate == completedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.CompletedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completedDate">CompletedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCompletedDate(this IQueryable<Abeced.Data.CardRevision> queryable, ComparisonOperator comparisonOperator, System.DateTime? completedDate)
        {
            if (completedDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("completedDate", "Parameter 'completedDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.CompletedDate > completedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.CompletedDate >= completedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.CompletedDate < completedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.CompletedDate <= completedDate);
                case ComparisonOperator.NotEquals:
                    return completedDate == null 
                        ? queryable.Where(c => c.CompletedDate != null) 
                        : queryable.Where(c => c.CompletedDate != completedDate);
                default:
                    return completedDate == null 
                        ? queryable.Where(c => c.CompletedDate == null) 
                        : queryable.Where(c => c.CompletedDate == completedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.CompletedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completedDate">CompletedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCompletedDate(this IQueryable<Abeced.Data.CardRevision> queryable, System.DateTime? completedDate, params System.DateTime?[] additionalValues)
        {
            var completedDateList = new List<System.DateTime?> { completedDate };

            if (additionalValues != null)
                completedDateList.AddRange(additionalValues);
            else
                completedDateList.Add(null);

            if (completedDateList.Count == 1)
                return queryable.ByCompletedDate(completedDateList[0]);

            return queryable.ByCompletedDate(completedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.CompletedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCompletedDate(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("CompletedDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.TimeIn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeIn">TimeIn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByTimeIn(this IQueryable<Abeced.Data.CardRevision> queryable, System.DateTime? timeIn)
        {
            // support nulls
            return timeIn == null 
                ? queryable.Where(c => c.TimeIn == null) 
                : queryable.Where(c => c.TimeIn == timeIn);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.TimeIn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeIn">TimeIn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByTimeIn(this IQueryable<Abeced.Data.CardRevision> queryable, ComparisonOperator comparisonOperator, System.DateTime? timeIn)
        {
            if (timeIn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("timeIn", "Parameter 'timeIn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.TimeIn > timeIn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.TimeIn >= timeIn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.TimeIn < timeIn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.TimeIn <= timeIn);
                case ComparisonOperator.NotEquals:
                    return timeIn == null 
                        ? queryable.Where(c => c.TimeIn != null) 
                        : queryable.Where(c => c.TimeIn != timeIn);
                default:
                    return timeIn == null 
                        ? queryable.Where(c => c.TimeIn == null) 
                        : queryable.Where(c => c.TimeIn == timeIn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.TimeIn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeIn">TimeIn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByTimeIn(this IQueryable<Abeced.Data.CardRevision> queryable, System.DateTime? timeIn, params System.DateTime?[] additionalValues)
        {
            var timeInList = new List<System.DateTime?> { timeIn };

            if (additionalValues != null)
                timeInList.AddRange(additionalValues);
            else
                timeInList.Add(null);

            if (timeInList.Count == 1)
                return queryable.ByTimeIn(timeInList[0]);

            return queryable.ByTimeIn(timeInList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.TimeIn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByTimeIn(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("TimeIn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.CorrectCards"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="correctCards">CorrectCards to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCorrectCards(this IQueryable<Abeced.Data.CardRevision> queryable, System.String correctCards)
        {
            // support nulls
            return correctCards == null 
                ? queryable.Where(c => c.CorrectCards == null) 
                : queryable.Where(c => c.CorrectCards == correctCards);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.CorrectCards"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="correctCards">CorrectCards to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCorrectCards(this IQueryable<Abeced.Data.CardRevision> queryable, ContainmentOperator containmentOperator, System.String correctCards)
        {
            if (correctCards == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("correctCards", "Parameter 'correctCards' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.CorrectCards.Contains(correctCards));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.CorrectCards.StartsWith(correctCards));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.CorrectCards.EndsWith(correctCards));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.CorrectCards.Contains(correctCards) == false);
                case ContainmentOperator.NotEquals:
                    return correctCards == null 
                        ? queryable.Where(c => c.CorrectCards != null) 
                        : queryable.Where(c => c.CorrectCards != correctCards);
                default:
                    return correctCards == null 
                        ? queryable.Where(c => c.CorrectCards == null) 
                        : queryable.Where(c => c.CorrectCards == correctCards);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.CorrectCards"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="correctCards">CorrectCards to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCorrectCards(this IQueryable<Abeced.Data.CardRevision> queryable, System.String correctCards, params System.String[] additionalValues)
        {
            var correctCardsList = new List<System.String> { correctCards };

            if (additionalValues != null)
                correctCardsList.AddRange(additionalValues);
            else
                correctCardsList.Add(null);

            if (correctCardsList.Count == 1)
                return queryable.ByCorrectCards(correctCardsList[0]);

            return queryable.ByCorrectCards(correctCardsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.CorrectCards"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCorrectCards(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("CorrectCards", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.WrongCards"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="wrongCards">WrongCards to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByWrongCards(this IQueryable<Abeced.Data.CardRevision> queryable, System.String wrongCards)
        {
            // support nulls
            return wrongCards == null 
                ? queryable.Where(c => c.WrongCards == null) 
                : queryable.Where(c => c.WrongCards == wrongCards);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.WrongCards"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="wrongCards">WrongCards to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByWrongCards(this IQueryable<Abeced.Data.CardRevision> queryable, ContainmentOperator containmentOperator, System.String wrongCards)
        {
            if (wrongCards == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("wrongCards", "Parameter 'wrongCards' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.WrongCards.Contains(wrongCards));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.WrongCards.StartsWith(wrongCards));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.WrongCards.EndsWith(wrongCards));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.WrongCards.Contains(wrongCards) == false);
                case ContainmentOperator.NotEquals:
                    return wrongCards == null 
                        ? queryable.Where(c => c.WrongCards != null) 
                        : queryable.Where(c => c.WrongCards != wrongCards);
                default:
                    return wrongCards == null 
                        ? queryable.Where(c => c.WrongCards == null) 
                        : queryable.Where(c => c.WrongCards == wrongCards);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.WrongCards"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="wrongCards">WrongCards to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByWrongCards(this IQueryable<Abeced.Data.CardRevision> queryable, System.String wrongCards, params System.String[] additionalValues)
        {
            var wrongCardsList = new List<System.String> { wrongCards };

            if (additionalValues != null)
                wrongCardsList.AddRange(additionalValues);
            else
                wrongCardsList.Add(null);

            if (wrongCardsList.Count == 1)
                return queryable.ByWrongCards(wrongCardsList[0]);

            return queryable.ByWrongCards(wrongCardsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.WrongCards"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByWrongCards(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("WrongCards", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Revisionslist"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionslist">Revisionslist to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByRevisionslist(this IQueryable<Abeced.Data.CardRevision> queryable, System.String revisionslist)
        {
            // support nulls
            return revisionslist == null 
                ? queryable.Where(c => c.Revisionslist == null) 
                : queryable.Where(c => c.Revisionslist == revisionslist);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Revisionslist"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionslist">Revisionslist to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByRevisionslist(this IQueryable<Abeced.Data.CardRevision> queryable, ContainmentOperator containmentOperator, System.String revisionslist)
        {
            if (revisionslist == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("revisionslist", "Parameter 'revisionslist' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Revisionslist.Contains(revisionslist));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Revisionslist.StartsWith(revisionslist));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Revisionslist.EndsWith(revisionslist));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Revisionslist.Contains(revisionslist) == false);
                case ContainmentOperator.NotEquals:
                    return revisionslist == null 
                        ? queryable.Where(c => c.Revisionslist != null) 
                        : queryable.Where(c => c.Revisionslist != revisionslist);
                default:
                    return revisionslist == null 
                        ? queryable.Where(c => c.Revisionslist == null) 
                        : queryable.Where(c => c.Revisionslist == revisionslist);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Revisionslist"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionslist">Revisionslist to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByRevisionslist(this IQueryable<Abeced.Data.CardRevision> queryable, System.String revisionslist, params System.String[] additionalValues)
        {
            var revisionslistList = new List<System.String> { revisionslist };

            if (additionalValues != null)
                revisionslistList.AddRange(additionalValues);
            else
                revisionslistList.Add(null);

            if (revisionslistList.Count == 1)
                return queryable.ByRevisionslist(revisionslistList[0]);

            return queryable.ByRevisionslist(revisionslistList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Revisionslist"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByRevisionslist(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("Revisionslist", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByUserid(this IQueryable<Abeced.Data.CardRevision> queryable, System.String userid)
        {
            // support nulls
            return userid == null 
                ? queryable.Where(c => c.Userid == null) 
                : queryable.Where(c => c.Userid == userid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByUserid(this IQueryable<Abeced.Data.CardRevision> queryable, ContainmentOperator containmentOperator, System.String userid)
        {
            if (userid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userid", "Parameter 'userid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Userid.Contains(userid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Userid.StartsWith(userid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Userid.EndsWith(userid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Userid.Contains(userid) == false);
                case ContainmentOperator.NotEquals:
                    return userid == null 
                        ? queryable.Where(c => c.Userid != null) 
                        : queryable.Where(c => c.Userid != userid);
                default:
                    return userid == null 
                        ? queryable.Where(c => c.Userid == null) 
                        : queryable.Where(c => c.Userid == userid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByUserid(this IQueryable<Abeced.Data.CardRevision> queryable, System.String userid, params System.String[] additionalValues)
        {
            var useridList = new List<System.String> { userid };

            if (additionalValues != null)
                useridList.AddRange(additionalValues);
            else
                useridList.Add(null);

            if (useridList.Count == 1)
                return queryable.ByUserid(useridList[0]);

            return queryable.ByUserid(useridList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByUserid(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("Userid", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCategory(this IQueryable<Abeced.Data.CardRevision> queryable, System.String category)
        {
            // support nulls
            return category == null 
                ? queryable.Where(c => c.Category == null) 
                : queryable.Where(c => c.Category == category);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCategory(this IQueryable<Abeced.Data.CardRevision> queryable, ContainmentOperator containmentOperator, System.String category)
        {
            if (category == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("category", "Parameter 'category' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Category.Contains(category));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Category.StartsWith(category));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Category.EndsWith(category));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Category.Contains(category) == false);
                case ContainmentOperator.NotEquals:
                    return category == null 
                        ? queryable.Where(c => c.Category != null) 
                        : queryable.Where(c => c.Category != category);
                default:
                    return category == null 
                        ? queryable.Where(c => c.Category == null) 
                        : queryable.Where(c => c.Category == category);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCategory(this IQueryable<Abeced.Data.CardRevision> queryable, System.String category, params System.String[] additionalValues)
        {
            var categoryList = new List<System.String> { category };

            if (additionalValues != null)
                categoryList.AddRange(additionalValues);
            else
                categoryList.Add(null);

            if (categoryList.Count == 1)
                return queryable.ByCategory(categoryList[0]);

            return queryable.ByCategory(categoryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCategory(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("Category", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.AskLater"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="askLater">AskLater to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByAskLater(this IQueryable<Abeced.Data.CardRevision> queryable, System.String askLater)
        {
            // support nulls
            return askLater == null 
                ? queryable.Where(c => c.AskLater == null) 
                : queryable.Where(c => c.AskLater == askLater);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.AskLater"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="askLater">AskLater to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByAskLater(this IQueryable<Abeced.Data.CardRevision> queryable, ContainmentOperator containmentOperator, System.String askLater)
        {
            if (askLater == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("askLater", "Parameter 'askLater' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.AskLater.Contains(askLater));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.AskLater.StartsWith(askLater));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.AskLater.EndsWith(askLater));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.AskLater.Contains(askLater) == false);
                case ContainmentOperator.NotEquals:
                    return askLater == null 
                        ? queryable.Where(c => c.AskLater != null) 
                        : queryable.Where(c => c.AskLater != askLater);
                default:
                    return askLater == null 
                        ? queryable.Where(c => c.AskLater == null) 
                        : queryable.Where(c => c.AskLater == askLater);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.AskLater"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="askLater">AskLater to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByAskLater(this IQueryable<Abeced.Data.CardRevision> queryable, System.String askLater, params System.String[] additionalValues)
        {
            var askLaterList = new List<System.String> { askLater };

            if (additionalValues != null)
                askLaterList.AddRange(additionalValues);
            else
                askLaterList.Add(null);

            if (askLaterList.Count == 1)
                return queryable.ByAskLater(askLaterList[0]);

            return queryable.ByAskLater(askLaterList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision.AskLater"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByAskLater(this IQueryable<Abeced.Data.CardRevision> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.CardRevision, bool>("AskLater", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision by Cardsession's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardsession">Cardsession to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCardsession(this IQueryable<Abeced.Data.CardRevision> queryable, Abeced.Data.Cardsession cardsession)
        {
            return queryable.ByCardsession(ComparisonOperator.Equals, cardsession);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision by Cardsession's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="cardsession">Cardsession to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCardsession(this IQueryable<Abeced.Data.CardRevision> queryable, ComparisonOperator comparisonOperator, Abeced.Data.Cardsession cardsession)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(c => c.Cardsession == cardsession);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Cardsession != cardsession);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision by Cardsession's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="csessionId">CsessionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCardsession(this IQueryable<Abeced.Data.CardRevision> queryable, System.String csessionId)
        {
            return queryable.ByCardsession(ComparisonOperator.Equals, csessionId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.CardRevision by Cardsession's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="csessionId">CsessionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.CardRevision> ByCardsession(this IQueryable<Abeced.Data.CardRevision> queryable, ComparisonOperator comparisonOperator, System.String csessionId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(c => c.Cardsession.CsessionId == csessionId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Cardsession.CsessionId != csessionId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}

#pragma warning restore 1591
