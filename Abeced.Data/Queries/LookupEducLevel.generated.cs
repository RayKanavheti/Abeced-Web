#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for LookupEducLevel.
    /// </summary>
    public static partial class LookupEducLevelExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.LookupEducLevel GetByKey(this IQueryable<Abeced.Data.LookupEducLevel> queryable
            , System.Int32 educLevelId
            )
        {
            return queryable
                .Where(l => l.EducLevelId == educLevelId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupEducLevel.EducLevelId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevelId">EducLevelId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupEducLevel> ByEducLevelId(this IQueryable<Abeced.Data.LookupEducLevel> queryable, System.Int32 educLevelId)
        {
            return queryable.Where(l => l.EducLevelId == educLevelId);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupEducLevel.EducLevelId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevelId">EducLevelId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupEducLevel> ByEducLevelId(this IQueryable<Abeced.Data.LookupEducLevel> queryable, ComparisonOperator comparisonOperator, System.Int32 educLevelId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.EducLevelId > educLevelId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.EducLevelId >= educLevelId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.EducLevelId < educLevelId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.EducLevelId <= educLevelId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.EducLevelId != educLevelId);
                default:
                    return queryable.Where(l => l.EducLevelId == educLevelId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupEducLevel.EducLevelId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevelId">EducLevelId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupEducLevel> ByEducLevelId(this IQueryable<Abeced.Data.LookupEducLevel> queryable, System.Int32 educLevelId, params System.Int32[] additionalValues)
        {
            var educLevelIdList = new List<System.Int32> { educLevelId };

            if (additionalValues != null)
                educLevelIdList.AddRange(additionalValues);

            if (educLevelIdList.Count == 1)
                return queryable.ByEducLevelId(educLevelIdList[0]);

            return queryable.ByEducLevelId(educLevelIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupEducLevel.EducLevelId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupEducLevel> ByEducLevelId(this IQueryable<Abeced.Data.LookupEducLevel> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.EducLevelId));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupEducLevel.EducLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevel">EducLevel to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupEducLevel> ByEducLevel(this IQueryable<Abeced.Data.LookupEducLevel> queryable, System.String educLevel)
        {
            return queryable.Where(l => l.EducLevel == educLevel);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupEducLevel.EducLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevel">EducLevel to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupEducLevel> ByEducLevel(this IQueryable<Abeced.Data.LookupEducLevel> queryable, ContainmentOperator containmentOperator, System.String educLevel)
        {
            if (educLevel == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("educLevel", "Parameter 'educLevel' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.EducLevel.Contains(educLevel));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.EducLevel.StartsWith(educLevel));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.EducLevel.EndsWith(educLevel));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.EducLevel.Contains(educLevel) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.EducLevel != educLevel);
                default:
                    return queryable.Where(l => l.EducLevel == educLevel);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupEducLevel.EducLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevel">EducLevel to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupEducLevel> ByEducLevel(this IQueryable<Abeced.Data.LookupEducLevel> queryable, System.String educLevel, params System.String[] additionalValues)
        {
            var educLevelList = new List<System.String> { educLevel };

            if (additionalValues != null)
                educLevelList.AddRange(additionalValues);

            if (educLevelList.Count == 1)
                return queryable.ByEducLevel(educLevelList[0]);

            return queryable.ByEducLevel(educLevelList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupEducLevel.EducLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupEducLevel> ByEducLevel(this IQueryable<Abeced.Data.LookupEducLevel> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(l => values.Contains(l.EducLevel));
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
