#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for LookupSubcategory.
    /// </summary>
    public static partial class LookupSubcategoryExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.LookupSubcategory GetByKey(this IQueryable<Abeced.Data.LookupSubcategory> queryable
            , System.String subcatid
            )
        {
            return queryable
                .Where(l => l.Subcatid == subcatid)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Subcatid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subcatid">Subcatid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> BySubcatid(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String subcatid)
        {
            return queryable.Where(l => l.Subcatid == subcatid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Subcatid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subcatid">Subcatid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> BySubcatid(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ContainmentOperator containmentOperator, System.String subcatid)
        {
            if (subcatid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("subcatid", "Parameter 'subcatid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.Subcatid.Contains(subcatid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.Subcatid.StartsWith(subcatid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.Subcatid.EndsWith(subcatid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.Subcatid.Contains(subcatid) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.Subcatid != subcatid);
                default:
                    return queryable.Where(l => l.Subcatid == subcatid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Subcatid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subcatid">Subcatid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> BySubcatid(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String subcatid, params System.String[] additionalValues)
        {
            var subcatidList = new List<System.String> { subcatid };

            if (additionalValues != null)
                subcatidList.AddRange(additionalValues);

            if (subcatidList.Count == 1)
                return queryable.BySubcatid(subcatidList[0]);

            return queryable.BySubcatid(subcatidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Subcatid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> BySubcatid(this IQueryable<Abeced.Data.LookupSubcategory> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(l => values.Contains(l.Subcatid));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catTitle">CatTitle to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatTitle(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String catTitle)
        {
            return queryable.Where(l => l.CatTitle == catTitle);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catTitle">CatTitle to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatTitle(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ContainmentOperator containmentOperator, System.String catTitle)
        {
            if (catTitle == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("catTitle", "Parameter 'catTitle' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.CatTitle.Contains(catTitle));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.CatTitle.StartsWith(catTitle));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.CatTitle.EndsWith(catTitle));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.CatTitle.Contains(catTitle) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.CatTitle != catTitle);
                default:
                    return queryable.Where(l => l.CatTitle == catTitle);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catTitle">CatTitle to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatTitle(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String catTitle, params System.String[] additionalValues)
        {
            var catTitleList = new List<System.String> { catTitle };

            if (additionalValues != null)
                catTitleList.AddRange(additionalValues);

            if (catTitleList.Count == 1)
                return queryable.ByCatTitle(catTitleList[0]);

            return queryable.ByCatTitle(catTitleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatTitle(this IQueryable<Abeced.Data.LookupSubcategory> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(l => values.Contains(l.CatTitle));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLastupdate(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.DateTime? lastupdate)
        {
            // support nulls
            return lastupdate == null 
                ? queryable.Where(l => l.Lastupdate == null) 
                : queryable.Where(l => l.Lastupdate == lastupdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLastupdate(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ComparisonOperator comparisonOperator, System.DateTime? lastupdate)
        {
            if (lastupdate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lastupdate", "Parameter 'lastupdate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.Lastupdate > lastupdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.Lastupdate >= lastupdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.Lastupdate < lastupdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.Lastupdate <= lastupdate);
                case ComparisonOperator.NotEquals:
                    return lastupdate == null 
                        ? queryable.Where(l => l.Lastupdate != null) 
                        : queryable.Where(l => l.Lastupdate != lastupdate);
                default:
                    return lastupdate == null 
                        ? queryable.Where(l => l.Lastupdate == null) 
                        : queryable.Where(l => l.Lastupdate == lastupdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLastupdate(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.DateTime? lastupdate, params System.DateTime?[] additionalValues)
        {
            var lastupdateList = new List<System.DateTime?> { lastupdate };

            if (additionalValues != null)
                lastupdateList.AddRange(additionalValues);
            else
                lastupdateList.Add(null);

            if (lastupdateList.Count == 1)
                return queryable.ByLastupdate(lastupdateList[0]);

            return queryable.ByLastupdate(lastupdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLastupdate(this IQueryable<Abeced.Data.LookupSubcategory> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.LookupSubcategory, bool>("Lastupdate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catLevel">CatLevel to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatLevel(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.Int32? catLevel)
        {
            // support nulls
            return catLevel == null 
                ? queryable.Where(l => l.CatLevel == null) 
                : queryable.Where(l => l.CatLevel == catLevel);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catLevel">CatLevel to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatLevel(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ComparisonOperator comparisonOperator, System.Int32? catLevel)
        {
            if (catLevel == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("catLevel", "Parameter 'catLevel' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.CatLevel > catLevel);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.CatLevel >= catLevel);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.CatLevel < catLevel);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.CatLevel <= catLevel);
                case ComparisonOperator.NotEquals:
                    return catLevel == null 
                        ? queryable.Where(l => l.CatLevel != null) 
                        : queryable.Where(l => l.CatLevel != catLevel);
                default:
                    return catLevel == null 
                        ? queryable.Where(l => l.CatLevel == null) 
                        : queryable.Where(l => l.CatLevel == catLevel);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catLevel">CatLevel to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatLevel(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.Int32? catLevel, params System.Int32?[] additionalValues)
        {
            var catLevelList = new List<System.Int32?> { catLevel };

            if (additionalValues != null)
                catLevelList.AddRange(additionalValues);
            else
                catLevelList.Add(null);

            if (catLevelList.Count == 1)
                return queryable.ByCatLevel(catLevelList[0]);

            return queryable.ByCatLevel(catLevelList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatLevel(this IQueryable<Abeced.Data.LookupSubcategory> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.LookupSubcategory, bool>("CatLevel", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Tags"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tags">Tags to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByTags(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String tags)
        {
            // support nulls
            return tags == null 
                ? queryable.Where(l => l.Tags == null) 
                : queryable.Where(l => l.Tags == tags);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Tags"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tags">Tags to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByTags(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ContainmentOperator containmentOperator, System.String tags)
        {
            if (tags == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("tags", "Parameter 'tags' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.Tags.Contains(tags));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.Tags.StartsWith(tags));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.Tags.EndsWith(tags));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.Tags.Contains(tags) == false);
                case ContainmentOperator.NotEquals:
                    return tags == null 
                        ? queryable.Where(l => l.Tags != null) 
                        : queryable.Where(l => l.Tags != tags);
                default:
                    return tags == null 
                        ? queryable.Where(l => l.Tags == null) 
                        : queryable.Where(l => l.Tags == tags);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Tags"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tags">Tags to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByTags(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String tags, params System.String[] additionalValues)
        {
            var tagsList = new List<System.String> { tags };

            if (additionalValues != null)
                tagsList.AddRange(additionalValues);
            else
                tagsList.Add(null);

            if (tagsList.Count == 1)
                return queryable.ByTags(tagsList[0]);

            return queryable.ByTags(tagsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.Tags"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByTags(this IQueryable<Abeced.Data.LookupSubcategory> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.LookupSubcategory, bool>("Tags", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.LearnerCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="learnerCount">LearnerCount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLearnerCount(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.Int64? learnerCount)
        {
            // support nulls
            return learnerCount == null 
                ? queryable.Where(l => l.LearnerCount == null) 
                : queryable.Where(l => l.LearnerCount == learnerCount);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.LearnerCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="learnerCount">LearnerCount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLearnerCount(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ComparisonOperator comparisonOperator, System.Int64? learnerCount)
        {
            if (learnerCount == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("learnerCount", "Parameter 'learnerCount' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.LearnerCount > learnerCount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.LearnerCount >= learnerCount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.LearnerCount < learnerCount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.LearnerCount <= learnerCount);
                case ComparisonOperator.NotEquals:
                    return learnerCount == null 
                        ? queryable.Where(l => l.LearnerCount != null) 
                        : queryable.Where(l => l.LearnerCount != learnerCount);
                default:
                    return learnerCount == null 
                        ? queryable.Where(l => l.LearnerCount == null) 
                        : queryable.Where(l => l.LearnerCount == learnerCount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.LearnerCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="learnerCount">LearnerCount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLearnerCount(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.Int64? learnerCount, params System.Int64?[] additionalValues)
        {
            var learnerCountList = new List<System.Int64?> { learnerCount };

            if (additionalValues != null)
                learnerCountList.AddRange(additionalValues);
            else
                learnerCountList.Add(null);

            if (learnerCountList.Count == 1)
                return queryable.ByLearnerCount(learnerCountList[0]);

            return queryable.ByLearnerCount(learnerCountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.LearnerCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLearnerCount(this IQueryable<Abeced.Data.LookupSubcategory> queryable, IEnumerable<System.Int64?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.LookupSubcategory, bool>("LearnerCount", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CourseLength"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courseLength">CourseLength to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCourseLength(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.Double? courseLength)
        {
            // support nulls
            return courseLength == null 
                ? queryable.Where(l => l.CourseLength == null) 
                : queryable.Where(l => l.CourseLength == courseLength);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CourseLength"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courseLength">CourseLength to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCourseLength(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ComparisonOperator comparisonOperator, System.Double? courseLength)
        {
            if (courseLength == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("courseLength", "Parameter 'courseLength' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.CourseLength > courseLength);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.CourseLength >= courseLength);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.CourseLength < courseLength);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.CourseLength <= courseLength);
                case ComparisonOperator.NotEquals:
                    return courseLength == null 
                        ? queryable.Where(l => l.CourseLength != null) 
                        : queryable.Where(l => l.CourseLength != courseLength);
                default:
                    return courseLength == null 
                        ? queryable.Where(l => l.CourseLength == null) 
                        : queryable.Where(l => l.CourseLength == courseLength);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CourseLength"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courseLength">CourseLength to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCourseLength(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.Double? courseLength, params System.Double?[] additionalValues)
        {
            var courseLengthList = new List<System.Double?> { courseLength };

            if (additionalValues != null)
                courseLengthList.AddRange(additionalValues);
            else
                courseLengthList.Add(null);

            if (courseLengthList.Count == 1)
                return queryable.ByCourseLength(courseLengthList[0]);

            return queryable.ByCourseLength(courseLengthList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CourseLength"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCourseLength(this IQueryable<Abeced.Data.LookupSubcategory> queryable, IEnumerable<System.Double?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.LookupSubcategory, bool>("CourseLength", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catImage">CatImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatImage(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String catImage)
        {
            // support nulls
            return catImage == null 
                ? queryable.Where(l => l.CatImage == null) 
                : queryable.Where(l => l.CatImage == catImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catImage">CatImage to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatImage(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ContainmentOperator containmentOperator, System.String catImage)
        {
            if (catImage == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("catImage", "Parameter 'catImage' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.CatImage.Contains(catImage));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.CatImage.StartsWith(catImage));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.CatImage.EndsWith(catImage));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.CatImage.Contains(catImage) == false);
                case ContainmentOperator.NotEquals:
                    return catImage == null 
                        ? queryable.Where(l => l.CatImage != null) 
                        : queryable.Where(l => l.CatImage != catImage);
                default:
                    return catImage == null 
                        ? queryable.Where(l => l.CatImage == null) 
                        : queryable.Where(l => l.CatImage == catImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catImage">CatImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatImage(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String catImage, params System.String[] additionalValues)
        {
            var catImageList = new List<System.String> { catImage };

            if (additionalValues != null)
                catImageList.AddRange(additionalValues);
            else
                catImageList.Add(null);

            if (catImageList.Count == 1)
                return queryable.ByCatImage(catImageList[0]);

            return queryable.ByCatImage(catImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory.CatImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByCatImage(this IQueryable<Abeced.Data.LookupSubcategory> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.LookupSubcategory, bool>("CatImage", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory by LookupSubcategoryMember's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lookupSubcategoryMember">LookupSubcategoryMember to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLookupSubcategoryMember(this IQueryable<Abeced.Data.LookupSubcategory> queryable, Abeced.Data.LookupSubcategory lookupSubcategoryMember)
        {
            return queryable.ByLookupSubcategoryMember(ComparisonOperator.Equals, lookupSubcategoryMember);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory by LookupSubcategoryMember's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="lookupSubcategoryMember">LookupSubcategoryMember to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLookupSubcategoryMember(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ComparisonOperator comparisonOperator, Abeced.Data.LookupSubcategory lookupSubcategoryMember)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(l => l.LookupSubcategoryMember == lookupSubcategoryMember);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.LookupSubcategoryMember != lookupSubcategoryMember);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory by LookupSubcategory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subcatid">Subcatid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLookupSubcategoryMember(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String subcatid)
        {
            return queryable.ByLookupSubcategoryMember(ComparisonOperator.Equals, subcatid);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory by LookupSubcategory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="subcatid">Subcatid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLookupSubcategoryMember(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ComparisonOperator comparisonOperator, System.String subcatid)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(l => l.LookupSubcategoryMember.Subcatid == subcatid);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.LookupSubcategoryMember.Subcatid != subcatid);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory by LookupCategory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lookupCategory">LookupCategory to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLookupCategory(this IQueryable<Abeced.Data.LookupSubcategory> queryable, Abeced.Data.LookupCategory lookupCategory)
        {
            return queryable.ByLookupCategory(ComparisonOperator.Equals, lookupCategory);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory by LookupCategory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="lookupCategory">LookupCategory to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLookupCategory(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ComparisonOperator comparisonOperator, Abeced.Data.LookupCategory lookupCategory)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(l => l.LookupCategory == lookupCategory);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.LookupCategory != lookupCategory);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory by LookupCategory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catid">Catid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLookupCategory(this IQueryable<Abeced.Data.LookupSubcategory> queryable, System.String catid)
        {
            return queryable.ByLookupCategory(ComparisonOperator.Equals, catid);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupSubcategory by LookupCategory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="catid">Catid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupSubcategory> ByLookupCategory(this IQueryable<Abeced.Data.LookupSubcategory> queryable, ComparisonOperator comparisonOperator, System.String catid)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(l => l.LookupCategory.Catid == catid);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.LookupCategory.Catid != catid);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}

#pragma warning restore 1591
