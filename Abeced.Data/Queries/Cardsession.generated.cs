#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for Cardsession.
    /// </summary>
    public static partial class CardsessionExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.Cardsession GetByKey(this IQueryable<Abeced.Data.Cardsession> queryable
            , System.String csessionId
            )
        {
            return queryable
                .Where(c => c.CsessionId == csessionId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CsessionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="csessionId">CsessionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCsessionId(this IQueryable<Abeced.Data.Cardsession> queryable, System.String csessionId)
        {
            return queryable.Where(c => c.CsessionId == csessionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CsessionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="csessionId">CsessionId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCsessionId(this IQueryable<Abeced.Data.Cardsession> queryable, ContainmentOperator containmentOperator, System.String csessionId)
        {
            if (csessionId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("csessionId", "Parameter 'csessionId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.CsessionId.Contains(csessionId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.CsessionId.StartsWith(csessionId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.CsessionId.EndsWith(csessionId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.CsessionId.Contains(csessionId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.CsessionId != csessionId);
                default:
                    return queryable.Where(c => c.CsessionId == csessionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CsessionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="csessionId">CsessionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCsessionId(this IQueryable<Abeced.Data.Cardsession> queryable, System.String csessionId, params System.String[] additionalValues)
        {
            var csessionIdList = new List<System.String> { csessionId };

            if (additionalValues != null)
                csessionIdList.AddRange(additionalValues);

            if (csessionIdList.Count == 1)
                return queryable.ByCsessionId(csessionIdList[0]);

            return queryable.ByCsessionId(csessionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CsessionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCsessionId(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.CsessionId));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByUserid(this IQueryable<Abeced.Data.Cardsession> queryable, System.String userid)
        {
            // support nulls
            return userid == null 
                ? queryable.Where(c => c.Userid == null) 
                : queryable.Where(c => c.Userid == userid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByUserid(this IQueryable<Abeced.Data.Cardsession> queryable, ContainmentOperator containmentOperator, System.String userid)
        {
            if (userid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userid", "Parameter 'userid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Userid.Contains(userid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Userid.StartsWith(userid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Userid.EndsWith(userid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Userid.Contains(userid) == false);
                case ContainmentOperator.NotEquals:
                    return userid == null 
                        ? queryable.Where(c => c.Userid != null) 
                        : queryable.Where(c => c.Userid != userid);
                default:
                    return userid == null 
                        ? queryable.Where(c => c.Userid == null) 
                        : queryable.Where(c => c.Userid == userid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByUserid(this IQueryable<Abeced.Data.Cardsession> queryable, System.String userid, params System.String[] additionalValues)
        {
            var useridList = new List<System.String> { userid };

            if (additionalValues != null)
                useridList.AddRange(additionalValues);
            else
                useridList.Add(null);

            if (useridList.Count == 1)
                return queryable.ByUserid(useridList[0]);

            return queryable.ByUserid(useridList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByUserid(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("Userid", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.TimeIn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeIn">TimeIn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByTimeIn(this IQueryable<Abeced.Data.Cardsession> queryable, System.DateTime timeIn)
        {
            return queryable.Where(c => c.TimeIn == timeIn);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.TimeIn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeIn">TimeIn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByTimeIn(this IQueryable<Abeced.Data.Cardsession> queryable, ComparisonOperator comparisonOperator, System.DateTime timeIn)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.TimeIn > timeIn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.TimeIn >= timeIn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.TimeIn < timeIn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.TimeIn <= timeIn);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.TimeIn != timeIn);
                default:
                    return queryable.Where(c => c.TimeIn == timeIn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.TimeIn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeIn">TimeIn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByTimeIn(this IQueryable<Abeced.Data.Cardsession> queryable, System.DateTime timeIn, params System.DateTime[] additionalValues)
        {
            var timeInList = new List<System.DateTime> { timeIn };

            if (additionalValues != null)
                timeInList.AddRange(additionalValues);

            if (timeInList.Count == 1)
                return queryable.ByTimeIn(timeInList[0]);

            return queryable.ByTimeIn(timeInList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.TimeIn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByTimeIn(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(c => values.Contains(c.TimeIn));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.TimeOut"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeOut">TimeOut to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByTimeOut(this IQueryable<Abeced.Data.Cardsession> queryable, System.DateTime? timeOut)
        {
            // support nulls
            return timeOut == null 
                ? queryable.Where(c => c.TimeOut == null) 
                : queryable.Where(c => c.TimeOut == timeOut);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.TimeOut"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeOut">TimeOut to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByTimeOut(this IQueryable<Abeced.Data.Cardsession> queryable, ComparisonOperator comparisonOperator, System.DateTime? timeOut)
        {
            if (timeOut == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("timeOut", "Parameter 'timeOut' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.TimeOut > timeOut);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.TimeOut >= timeOut);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.TimeOut < timeOut);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.TimeOut <= timeOut);
                case ComparisonOperator.NotEquals:
                    return timeOut == null 
                        ? queryable.Where(c => c.TimeOut != null) 
                        : queryable.Where(c => c.TimeOut != timeOut);
                default:
                    return timeOut == null 
                        ? queryable.Where(c => c.TimeOut == null) 
                        : queryable.Where(c => c.TimeOut == timeOut);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.TimeOut"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeOut">TimeOut to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByTimeOut(this IQueryable<Abeced.Data.Cardsession> queryable, System.DateTime? timeOut, params System.DateTime?[] additionalValues)
        {
            var timeOutList = new List<System.DateTime?> { timeOut };

            if (additionalValues != null)
                timeOutList.AddRange(additionalValues);
            else
                timeOutList.Add(null);

            if (timeOutList.Count == 1)
                return queryable.ByTimeOut(timeOutList[0]);

            return queryable.ByTimeOut(timeOutList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.TimeOut"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByTimeOut(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("TimeOut", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Completed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completed">Completed to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCompleted(this IQueryable<Abeced.Data.Cardsession> queryable, System.Boolean? completed)
        {
            // support nulls
            return completed == null 
                ? queryable.Where(c => c.Completed == null) 
                : queryable.Where(c => c.Completed == completed);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Completed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completed">Completed to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCompleted(this IQueryable<Abeced.Data.Cardsession> queryable, ComparisonOperator comparisonOperator, System.Boolean? completed)
        {
            if (completed == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("completed", "Parameter 'completed' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return completed == null 
                        ? queryable.Where(c => c.Completed != null) 
                        : queryable.Where(c => c.Completed != completed);
                default:
                    return completed == null 
                        ? queryable.Where(c => c.Completed == null) 
                        : queryable.Where(c => c.Completed == completed);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Completed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completed">Completed to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCompleted(this IQueryable<Abeced.Data.Cardsession> queryable, System.Boolean? completed, params System.Boolean?[] additionalValues)
        {
            var completedList = new List<System.Boolean?> { completed };

            if (additionalValues != null)
                completedList.AddRange(additionalValues);
            else
                completedList.Add(null);

            if (completedList.Count == 1)
                return queryable.ByCompleted(completedList[0]);

            return queryable.ByCompleted(completedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Completed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCompleted(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("Completed", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CompletedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completedDate">CompletedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCompletedDate(this IQueryable<Abeced.Data.Cardsession> queryable, System.DateTime? completedDate)
        {
            // support nulls
            return completedDate == null 
                ? queryable.Where(c => c.CompletedDate == null) 
                : queryable.Where(c => c.CompletedDate == completedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CompletedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completedDate">CompletedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCompletedDate(this IQueryable<Abeced.Data.Cardsession> queryable, ComparisonOperator comparisonOperator, System.DateTime? completedDate)
        {
            if (completedDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("completedDate", "Parameter 'completedDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.CompletedDate > completedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.CompletedDate >= completedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.CompletedDate < completedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.CompletedDate <= completedDate);
                case ComparisonOperator.NotEquals:
                    return completedDate == null 
                        ? queryable.Where(c => c.CompletedDate != null) 
                        : queryable.Where(c => c.CompletedDate != completedDate);
                default:
                    return completedDate == null 
                        ? queryable.Where(c => c.CompletedDate == null) 
                        : queryable.Where(c => c.CompletedDate == completedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CompletedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completedDate">CompletedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCompletedDate(this IQueryable<Abeced.Data.Cardsession> queryable, System.DateTime? completedDate, params System.DateTime?[] additionalValues)
        {
            var completedDateList = new List<System.DateTime?> { completedDate };

            if (additionalValues != null)
                completedDateList.AddRange(additionalValues);
            else
                completedDateList.Add(null);

            if (completedDateList.Count == 1)
                return queryable.ByCompletedDate(completedDateList[0]);

            return queryable.ByCompletedDate(completedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CompletedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCompletedDate(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("CompletedDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CardsInSession"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardsInSession">CardsInSession to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCardsInSession(this IQueryable<Abeced.Data.Cardsession> queryable, System.String cardsInSession)
        {
            // support nulls
            return cardsInSession == null 
                ? queryable.Where(c => c.CardsInSession == null) 
                : queryable.Where(c => c.CardsInSession == cardsInSession);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CardsInSession"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardsInSession">CardsInSession to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCardsInSession(this IQueryable<Abeced.Data.Cardsession> queryable, ContainmentOperator containmentOperator, System.String cardsInSession)
        {
            if (cardsInSession == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cardsInSession", "Parameter 'cardsInSession' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.CardsInSession.Contains(cardsInSession));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.CardsInSession.StartsWith(cardsInSession));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.CardsInSession.EndsWith(cardsInSession));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.CardsInSession.Contains(cardsInSession) == false);
                case ContainmentOperator.NotEquals:
                    return cardsInSession == null 
                        ? queryable.Where(c => c.CardsInSession != null) 
                        : queryable.Where(c => c.CardsInSession != cardsInSession);
                default:
                    return cardsInSession == null 
                        ? queryable.Where(c => c.CardsInSession == null) 
                        : queryable.Where(c => c.CardsInSession == cardsInSession);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CardsInSession"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardsInSession">CardsInSession to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCardsInSession(this IQueryable<Abeced.Data.Cardsession> queryable, System.String cardsInSession, params System.String[] additionalValues)
        {
            var cardsInSessionList = new List<System.String> { cardsInSession };

            if (additionalValues != null)
                cardsInSessionList.AddRange(additionalValues);
            else
                cardsInSessionList.Add(null);

            if (cardsInSessionList.Count == 1)
                return queryable.ByCardsInSession(cardsInSessionList[0]);

            return queryable.ByCardsInSession(cardsInSessionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.CardsInSession"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCardsInSession(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("CardsInSession", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Cardscount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardscount">Cardscount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCardscount(this IQueryable<Abeced.Data.Cardsession> queryable, System.Int32? cardscount)
        {
            // support nulls
            return cardscount == null 
                ? queryable.Where(c => c.Cardscount == null) 
                : queryable.Where(c => c.Cardscount == cardscount);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Cardscount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardscount">Cardscount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCardscount(this IQueryable<Abeced.Data.Cardsession> queryable, ComparisonOperator comparisonOperator, System.Int32? cardscount)
        {
            if (cardscount == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("cardscount", "Parameter 'cardscount' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.Cardscount > cardscount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.Cardscount >= cardscount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.Cardscount < cardscount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.Cardscount <= cardscount);
                case ComparisonOperator.NotEquals:
                    return cardscount == null 
                        ? queryable.Where(c => c.Cardscount != null) 
                        : queryable.Where(c => c.Cardscount != cardscount);
                default:
                    return cardscount == null 
                        ? queryable.Where(c => c.Cardscount == null) 
                        : queryable.Where(c => c.Cardscount == cardscount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Cardscount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardscount">Cardscount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCardscount(this IQueryable<Abeced.Data.Cardsession> queryable, System.Int32? cardscount, params System.Int32?[] additionalValues)
        {
            var cardscountList = new List<System.Int32?> { cardscount };

            if (additionalValues != null)
                cardscountList.AddRange(additionalValues);
            else
                cardscountList.Add(null);

            if (cardscountList.Count == 1)
                return queryable.ByCardscount(cardscountList[0]);

            return queryable.ByCardscount(cardscountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Cardscount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCardscount(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("Cardscount", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Finishedcount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="finishedcount">Finishedcount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByFinishedcount(this IQueryable<Abeced.Data.Cardsession> queryable, System.Int32? finishedcount)
        {
            // support nulls
            return finishedcount == null 
                ? queryable.Where(c => c.Finishedcount == null) 
                : queryable.Where(c => c.Finishedcount == finishedcount);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Finishedcount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="finishedcount">Finishedcount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByFinishedcount(this IQueryable<Abeced.Data.Cardsession> queryable, ComparisonOperator comparisonOperator, System.Int32? finishedcount)
        {
            if (finishedcount == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("finishedcount", "Parameter 'finishedcount' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.Finishedcount > finishedcount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.Finishedcount >= finishedcount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.Finishedcount < finishedcount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.Finishedcount <= finishedcount);
                case ComparisonOperator.NotEquals:
                    return finishedcount == null 
                        ? queryable.Where(c => c.Finishedcount != null) 
                        : queryable.Where(c => c.Finishedcount != finishedcount);
                default:
                    return finishedcount == null 
                        ? queryable.Where(c => c.Finishedcount == null) 
                        : queryable.Where(c => c.Finishedcount == finishedcount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Finishedcount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="finishedcount">Finishedcount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByFinishedcount(this IQueryable<Abeced.Data.Cardsession> queryable, System.Int32? finishedcount, params System.Int32?[] additionalValues)
        {
            var finishedcountList = new List<System.Int32?> { finishedcount };

            if (additionalValues != null)
                finishedcountList.AddRange(additionalValues);
            else
                finishedcountList.Add(null);

            if (finishedcountList.Count == 1)
                return queryable.ByFinishedcount(finishedcountList[0]);

            return queryable.ByFinishedcount(finishedcountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Finishedcount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByFinishedcount(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("Finishedcount", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCategory(this IQueryable<Abeced.Data.Cardsession> queryable, System.String category)
        {
            // support nulls
            return category == null 
                ? queryable.Where(c => c.Category == null) 
                : queryable.Where(c => c.Category == category);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCategory(this IQueryable<Abeced.Data.Cardsession> queryable, ContainmentOperator containmentOperator, System.String category)
        {
            if (category == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("category", "Parameter 'category' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Category.Contains(category));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Category.StartsWith(category));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Category.EndsWith(category));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Category.Contains(category) == false);
                case ContainmentOperator.NotEquals:
                    return category == null 
                        ? queryable.Where(c => c.Category != null) 
                        : queryable.Where(c => c.Category != category);
                default:
                    return category == null 
                        ? queryable.Where(c => c.Category == null) 
                        : queryable.Where(c => c.Category == category);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCategory(this IQueryable<Abeced.Data.Cardsession> queryable, System.String category, params System.String[] additionalValues)
        {
            var categoryList = new List<System.String> { category };

            if (additionalValues != null)
                categoryList.AddRange(additionalValues);
            else
                categoryList.Add(null);

            if (categoryList.Count == 1)
                return queryable.ByCategory(categoryList[0]);

            return queryable.ByCategory(categoryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByCategory(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("Category", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.RevisedLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisedLevel">RevisedLevel to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByRevisedLevel(this IQueryable<Abeced.Data.Cardsession> queryable, System.Int32 revisedLevel)
        {
            return queryable.Where(c => c.RevisedLevel == revisedLevel);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.RevisedLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisedLevel">RevisedLevel to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByRevisedLevel(this IQueryable<Abeced.Data.Cardsession> queryable, ComparisonOperator comparisonOperator, System.Int32 revisedLevel)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.RevisedLevel > revisedLevel);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.RevisedLevel >= revisedLevel);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.RevisedLevel < revisedLevel);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.RevisedLevel <= revisedLevel);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.RevisedLevel != revisedLevel);
                default:
                    return queryable.Where(c => c.RevisedLevel == revisedLevel);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.RevisedLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisedLevel">RevisedLevel to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByRevisedLevel(this IQueryable<Abeced.Data.Cardsession> queryable, System.Int32 revisedLevel, params System.Int32[] additionalValues)
        {
            var revisedLevelList = new List<System.Int32> { revisedLevel };

            if (additionalValues != null)
                revisedLevelList.AddRange(additionalValues);

            if (revisedLevelList.Count == 1)
                return queryable.ByRevisedLevel(revisedLevelList[0]);

            return queryable.ByRevisedLevel(revisedLevelList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.RevisedLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByRevisedLevel(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(c => values.Contains(c.RevisedLevel));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.AskLater"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="askLater">AskLater to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByAskLater(this IQueryable<Abeced.Data.Cardsession> queryable, System.String askLater)
        {
            // support nulls
            return askLater == null 
                ? queryable.Where(c => c.AskLater == null) 
                : queryable.Where(c => c.AskLater == askLater);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.AskLater"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="askLater">AskLater to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByAskLater(this IQueryable<Abeced.Data.Cardsession> queryable, ContainmentOperator containmentOperator, System.String askLater)
        {
            if (askLater == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("askLater", "Parameter 'askLater' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.AskLater.Contains(askLater));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.AskLater.StartsWith(askLater));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.AskLater.EndsWith(askLater));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.AskLater.Contains(askLater) == false);
                case ContainmentOperator.NotEquals:
                    return askLater == null 
                        ? queryable.Where(c => c.AskLater != null) 
                        : queryable.Where(c => c.AskLater != askLater);
                default:
                    return askLater == null 
                        ? queryable.Where(c => c.AskLater == null) 
                        : queryable.Where(c => c.AskLater == askLater);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.AskLater"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="askLater">AskLater to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByAskLater(this IQueryable<Abeced.Data.Cardsession> queryable, System.String askLater, params System.String[] additionalValues)
        {
            var askLaterList = new List<System.String> { askLater };

            if (additionalValues != null)
                askLaterList.AddRange(additionalValues);
            else
                askLaterList.Add(null);

            if (askLaterList.Count == 1)
                return queryable.ByAskLater(askLaterList[0]);

            return queryable.ByAskLater(askLaterList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.AskLater"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByAskLater(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("AskLater", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByLastupdate(this IQueryable<Abeced.Data.Cardsession> queryable, System.DateTime? lastupdate)
        {
            // support nulls
            return lastupdate == null 
                ? queryable.Where(c => c.Lastupdate == null) 
                : queryable.Where(c => c.Lastupdate == lastupdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByLastupdate(this IQueryable<Abeced.Data.Cardsession> queryable, ComparisonOperator comparisonOperator, System.DateTime? lastupdate)
        {
            if (lastupdate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lastupdate", "Parameter 'lastupdate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.Lastupdate > lastupdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.Lastupdate >= lastupdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.Lastupdate < lastupdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.Lastupdate <= lastupdate);
                case ComparisonOperator.NotEquals:
                    return lastupdate == null 
                        ? queryable.Where(c => c.Lastupdate != null) 
                        : queryable.Where(c => c.Lastupdate != lastupdate);
                default:
                    return lastupdate == null 
                        ? queryable.Where(c => c.Lastupdate == null) 
                        : queryable.Where(c => c.Lastupdate == lastupdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByLastupdate(this IQueryable<Abeced.Data.Cardsession> queryable, System.DateTime? lastupdate, params System.DateTime?[] additionalValues)
        {
            var lastupdateList = new List<System.DateTime?> { lastupdate };

            if (additionalValues != null)
                lastupdateList.AddRange(additionalValues);
            else
                lastupdateList.Add(null);

            if (lastupdateList.Count == 1)
                return queryable.ByLastupdate(lastupdateList[0]);

            return queryable.ByLastupdate(lastupdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Cardsession.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Cardsession> ByLastupdate(this IQueryable<Abeced.Data.Cardsession> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Cardsession, bool>("Lastupdate", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
