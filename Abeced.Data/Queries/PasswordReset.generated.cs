#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for PasswordReset.
    /// </summary>
    public static partial class PasswordResetExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.PasswordReset GetByKey(this IQueryable<Abeced.Data.PasswordReset> queryable
            , System.String requestid
            )
        {
            return queryable
                .Where(p => p.Requestid == requestid)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Requestid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="requestid">Requestid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByRequestid(this IQueryable<Abeced.Data.PasswordReset> queryable, System.String requestid)
        {
            return queryable.Where(p => p.Requestid == requestid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Requestid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="requestid">Requestid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByRequestid(this IQueryable<Abeced.Data.PasswordReset> queryable, ContainmentOperator containmentOperator, System.String requestid)
        {
            if (requestid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("requestid", "Parameter 'requestid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Requestid.Contains(requestid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Requestid.StartsWith(requestid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Requestid.EndsWith(requestid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Requestid.Contains(requestid) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.Requestid != requestid);
                default:
                    return queryable.Where(p => p.Requestid == requestid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Requestid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="requestid">Requestid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByRequestid(this IQueryable<Abeced.Data.PasswordReset> queryable, System.String requestid, params System.String[] additionalValues)
        {
            var requestidList = new List<System.String> { requestid };

            if (additionalValues != null)
                requestidList.AddRange(additionalValues);

            if (requestidList.Count == 1)
                return queryable.ByRequestid(requestidList[0]);

            return queryable.ByRequestid(requestidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Requestid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByRequestid(this IQueryable<Abeced.Data.PasswordReset> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.Requestid));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByEmail(this IQueryable<Abeced.Data.PasswordReset> queryable, System.String email)
        {
            return queryable.Where(p => p.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByEmail(this IQueryable<Abeced.Data.PasswordReset> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.Email != email);
                default:
                    return queryable.Where(p => p.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByEmail(this IQueryable<Abeced.Data.PasswordReset> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByEmail(this IQueryable<Abeced.Data.PasswordReset> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.Email));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Reqtime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="reqtime">Reqtime to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByReqtime(this IQueryable<Abeced.Data.PasswordReset> queryable, System.DateTime reqtime)
        {
            return queryable.Where(p => p.Reqtime == reqtime);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Reqtime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="reqtime">Reqtime to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByReqtime(this IQueryable<Abeced.Data.PasswordReset> queryable, ComparisonOperator comparisonOperator, System.DateTime reqtime)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.Reqtime > reqtime);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.Reqtime >= reqtime);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.Reqtime < reqtime);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.Reqtime <= reqtime);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(p => p.Reqtime != reqtime);
                default:
                    return queryable.Where(p => p.Reqtime == reqtime);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Reqtime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="reqtime">Reqtime to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByReqtime(this IQueryable<Abeced.Data.PasswordReset> queryable, System.DateTime reqtime, params System.DateTime[] additionalValues)
        {
            var reqtimeList = new List<System.DateTime> { reqtime };

            if (additionalValues != null)
                reqtimeList.AddRange(additionalValues);

            if (reqtimeList.Count == 1)
                return queryable.ByReqtime(reqtimeList[0]);

            return queryable.ByReqtime(reqtimeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Reqtime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByReqtime(this IQueryable<Abeced.Data.PasswordReset> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(p => values.Contains(p.Reqtime));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Isvalid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isvalid">Isvalid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByIsvalid(this IQueryable<Abeced.Data.PasswordReset> queryable, System.Boolean isvalid)
        {
            return queryable.Where(p => p.Isvalid == isvalid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Isvalid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isvalid">Isvalid to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByIsvalid(this IQueryable<Abeced.Data.PasswordReset> queryable, ComparisonOperator comparisonOperator, System.Boolean isvalid)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(p => p.Isvalid != isvalid);
                default:
                    return queryable.Where(p => p.Isvalid == isvalid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Isvalid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isvalid">Isvalid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByIsvalid(this IQueryable<Abeced.Data.PasswordReset> queryable, System.Boolean isvalid, params System.Boolean[] additionalValues)
        {
            var isvalidList = new List<System.Boolean> { isvalid };

            if (additionalValues != null)
                isvalidList.AddRange(additionalValues);

            if (isvalidList.Count == 1)
                return queryable.ByIsvalid(isvalidList[0]);

            return queryable.ByIsvalid(isvalidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.PasswordReset.Isvalid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.PasswordReset> ByIsvalid(this IQueryable<Abeced.Data.PasswordReset> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(p => values.Contains(p.Isvalid));
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
