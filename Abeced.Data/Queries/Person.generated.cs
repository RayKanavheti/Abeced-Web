#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for Person.
    /// </summary>
    public static partial class PersonExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.Person GetByKey(this IQueryable<Abeced.Data.Person> queryable
            , System.String userid
            )
        {
            return queryable
                .Where(p => p.Userid == userid)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByUserid(this IQueryable<Abeced.Data.Person> queryable, System.String userid)
        {
            return queryable.Where(p => p.Userid == userid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByUserid(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String userid)
        {
            if (userid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userid", "Parameter 'userid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Userid.Contains(userid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Userid.StartsWith(userid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Userid.EndsWith(userid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Userid.Contains(userid) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.Userid != userid);
                default:
                    return queryable.Where(p => p.Userid == userid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByUserid(this IQueryable<Abeced.Data.Person> queryable, System.String userid, params System.String[] additionalValues)
        {
            var useridList = new List<System.String> { userid };

            if (additionalValues != null)
                useridList.AddRange(additionalValues);

            if (useridList.Count == 1)
                return queryable.ByUserid(useridList[0]);

            return queryable.ByUserid(useridList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByUserid(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.Userid));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Lastname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastname">Lastname to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByLastname(this IQueryable<Abeced.Data.Person> queryable, System.String lastname)
        {
            // support nulls
            return lastname == null 
                ? queryable.Where(p => p.Lastname == null) 
                : queryable.Where(p => p.Lastname == lastname);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Lastname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastname">Lastname to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByLastname(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String lastname)
        {
            if (lastname == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastname", "Parameter 'lastname' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Lastname.Contains(lastname));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Lastname.StartsWith(lastname));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Lastname.EndsWith(lastname));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Lastname.Contains(lastname) == false);
                case ContainmentOperator.NotEquals:
                    return lastname == null 
                        ? queryable.Where(p => p.Lastname != null) 
                        : queryable.Where(p => p.Lastname != lastname);
                default:
                    return lastname == null 
                        ? queryable.Where(p => p.Lastname == null) 
                        : queryable.Where(p => p.Lastname == lastname);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Lastname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastname">Lastname to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByLastname(this IQueryable<Abeced.Data.Person> queryable, System.String lastname, params System.String[] additionalValues)
        {
            var lastnameList = new List<System.String> { lastname };

            if (additionalValues != null)
                lastnameList.AddRange(additionalValues);
            else
                lastnameList.Add(null);

            if (lastnameList.Count == 1)
                return queryable.ByLastname(lastnameList[0]);

            return queryable.ByLastname(lastnameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Lastname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByLastname(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("Lastname", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Firstname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstname">Firstname to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByFirstname(this IQueryable<Abeced.Data.Person> queryable, System.String firstname)
        {
            // support nulls
            return firstname == null 
                ? queryable.Where(p => p.Firstname == null) 
                : queryable.Where(p => p.Firstname == firstname);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Firstname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstname">Firstname to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByFirstname(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String firstname)
        {
            if (firstname == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstname", "Parameter 'firstname' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Firstname.Contains(firstname));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Firstname.StartsWith(firstname));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Firstname.EndsWith(firstname));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Firstname.Contains(firstname) == false);
                case ContainmentOperator.NotEquals:
                    return firstname == null 
                        ? queryable.Where(p => p.Firstname != null) 
                        : queryable.Where(p => p.Firstname != firstname);
                default:
                    return firstname == null 
                        ? queryable.Where(p => p.Firstname == null) 
                        : queryable.Where(p => p.Firstname == firstname);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Firstname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstname">Firstname to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByFirstname(this IQueryable<Abeced.Data.Person> queryable, System.String firstname, params System.String[] additionalValues)
        {
            var firstnameList = new List<System.String> { firstname };

            if (additionalValues != null)
                firstnameList.AddRange(additionalValues);
            else
                firstnameList.Add(null);

            if (firstnameList.Count == 1)
                return queryable.ByFirstname(firstnameList[0]);

            return queryable.ByFirstname(firstnameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Firstname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByFirstname(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("Firstname", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByAddress(this IQueryable<Abeced.Data.Person> queryable, System.String address)
        {
            // support nulls
            return address == null 
                ? queryable.Where(p => p.Address == null) 
                : queryable.Where(p => p.Address == address);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByAddress(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String address)
        {
            if (address == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address", "Parameter 'address' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Address.Contains(address));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Address.StartsWith(address));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Address.EndsWith(address));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Address.Contains(address) == false);
                case ContainmentOperator.NotEquals:
                    return address == null 
                        ? queryable.Where(p => p.Address != null) 
                        : queryable.Where(p => p.Address != address);
                default:
                    return address == null 
                        ? queryable.Where(p => p.Address == null) 
                        : queryable.Where(p => p.Address == address);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByAddress(this IQueryable<Abeced.Data.Person> queryable, System.String address, params System.String[] additionalValues)
        {
            var addressList = new List<System.String> { address };

            if (additionalValues != null)
                addressList.AddRange(additionalValues);
            else
                addressList.Add(null);

            if (addressList.Count == 1)
                return queryable.ByAddress(addressList[0]);

            return queryable.ByAddress(addressList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByAddress(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("Address", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByEmail(this IQueryable<Abeced.Data.Person> queryable, System.String email)
        {
            // support nulls
            return email == null 
                ? queryable.Where(p => p.Email == null) 
                : queryable.Where(p => p.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByEmail(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return email == null 
                        ? queryable.Where(p => p.Email != null) 
                        : queryable.Where(p => p.Email != email);
                default:
                    return email == null 
                        ? queryable.Where(p => p.Email == null) 
                        : queryable.Where(p => p.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByEmail(this IQueryable<Abeced.Data.Person> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);
            else
                emailList.Add(null);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByEmail(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("Email", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByTitle(this IQueryable<Abeced.Data.Person> queryable, System.String title)
        {
            // support nulls
            return title == null 
                ? queryable.Where(p => p.Title == null) 
                : queryable.Where(p => p.Title == title);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByTitle(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String title)
        {
            if (title == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("title", "Parameter 'title' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Title.Contains(title));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Title.StartsWith(title));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Title.EndsWith(title));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Title.Contains(title) == false);
                case ContainmentOperator.NotEquals:
                    return title == null 
                        ? queryable.Where(p => p.Title != null) 
                        : queryable.Where(p => p.Title != title);
                default:
                    return title == null 
                        ? queryable.Where(p => p.Title == null) 
                        : queryable.Where(p => p.Title == title);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByTitle(this IQueryable<Abeced.Data.Person> queryable, System.String title, params System.String[] additionalValues)
        {
            var titleList = new List<System.String> { title };

            if (additionalValues != null)
                titleList.AddRange(additionalValues);
            else
                titleList.Add(null);

            if (titleList.Count == 1)
                return queryable.ByTitle(titleList[0]);

            return queryable.ByTitle(titleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByTitle(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("Title", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.AgeGroup"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageGroup">AgeGroup to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByAgeGroup(this IQueryable<Abeced.Data.Person> queryable, System.String ageGroup)
        {
            // support nulls
            return ageGroup == null 
                ? queryable.Where(p => p.AgeGroup == null) 
                : queryable.Where(p => p.AgeGroup == ageGroup);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.AgeGroup"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageGroup">AgeGroup to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByAgeGroup(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String ageGroup)
        {
            if (ageGroup == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("ageGroup", "Parameter 'ageGroup' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.AgeGroup.Contains(ageGroup));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.AgeGroup.StartsWith(ageGroup));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.AgeGroup.EndsWith(ageGroup));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.AgeGroup.Contains(ageGroup) == false);
                case ContainmentOperator.NotEquals:
                    return ageGroup == null 
                        ? queryable.Where(p => p.AgeGroup != null) 
                        : queryable.Where(p => p.AgeGroup != ageGroup);
                default:
                    return ageGroup == null 
                        ? queryable.Where(p => p.AgeGroup == null) 
                        : queryable.Where(p => p.AgeGroup == ageGroup);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.AgeGroup"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageGroup">AgeGroup to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByAgeGroup(this IQueryable<Abeced.Data.Person> queryable, System.String ageGroup, params System.String[] additionalValues)
        {
            var ageGroupList = new List<System.String> { ageGroup };

            if (additionalValues != null)
                ageGroupList.AddRange(additionalValues);
            else
                ageGroupList.Add(null);

            if (ageGroupList.Count == 1)
                return queryable.ByAgeGroup(ageGroupList[0]);

            return queryable.ByAgeGroup(ageGroupList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.AgeGroup"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByAgeGroup(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("AgeGroup", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Occupation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="occupation">Occupation to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByOccupation(this IQueryable<Abeced.Data.Person> queryable, System.String occupation)
        {
            // support nulls
            return occupation == null 
                ? queryable.Where(p => p.Occupation == null) 
                : queryable.Where(p => p.Occupation == occupation);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Occupation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="occupation">Occupation to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByOccupation(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String occupation)
        {
            if (occupation == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("occupation", "Parameter 'occupation' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Occupation.Contains(occupation));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Occupation.StartsWith(occupation));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Occupation.EndsWith(occupation));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Occupation.Contains(occupation) == false);
                case ContainmentOperator.NotEquals:
                    return occupation == null 
                        ? queryable.Where(p => p.Occupation != null) 
                        : queryable.Where(p => p.Occupation != occupation);
                default:
                    return occupation == null 
                        ? queryable.Where(p => p.Occupation == null) 
                        : queryable.Where(p => p.Occupation == occupation);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Occupation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="occupation">Occupation to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByOccupation(this IQueryable<Abeced.Data.Person> queryable, System.String occupation, params System.String[] additionalValues)
        {
            var occupationList = new List<System.String> { occupation };

            if (additionalValues != null)
                occupationList.AddRange(additionalValues);
            else
                occupationList.Add(null);

            if (occupationList.Count == 1)
                return queryable.ByOccupation(occupationList[0]);

            return queryable.ByOccupation(occupationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Occupation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByOccupation(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("Occupation", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.EducLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevel">EducLevel to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByEducLevel(this IQueryable<Abeced.Data.Person> queryable, System.String educLevel)
        {
            // support nulls
            return educLevel == null 
                ? queryable.Where(p => p.EducLevel == null) 
                : queryable.Where(p => p.EducLevel == educLevel);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.EducLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevel">EducLevel to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByEducLevel(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String educLevel)
        {
            if (educLevel == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("educLevel", "Parameter 'educLevel' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.EducLevel.Contains(educLevel));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.EducLevel.StartsWith(educLevel));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.EducLevel.EndsWith(educLevel));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.EducLevel.Contains(educLevel) == false);
                case ContainmentOperator.NotEquals:
                    return educLevel == null 
                        ? queryable.Where(p => p.EducLevel != null) 
                        : queryable.Where(p => p.EducLevel != educLevel);
                default:
                    return educLevel == null 
                        ? queryable.Where(p => p.EducLevel == null) 
                        : queryable.Where(p => p.EducLevel == educLevel);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.EducLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educLevel">EducLevel to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByEducLevel(this IQueryable<Abeced.Data.Person> queryable, System.String educLevel, params System.String[] additionalValues)
        {
            var educLevelList = new List<System.String> { educLevel };

            if (additionalValues != null)
                educLevelList.AddRange(additionalValues);
            else
                educLevelList.Add(null);

            if (educLevelList.Count == 1)
                return queryable.ByEducLevel(educLevelList[0]);

            return queryable.ByEducLevel(educLevelList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.EducLevel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByEducLevel(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("EducLevel", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Sex"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sex">Sex to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> BySex(this IQueryable<Abeced.Data.Person> queryable, System.String sex)
        {
            // support nulls
            return sex == null 
                ? queryable.Where(p => p.Sex == null) 
                : queryable.Where(p => p.Sex == sex);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Sex"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sex">Sex to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> BySex(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String sex)
        {
            if (sex == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("sex", "Parameter 'sex' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Sex.Contains(sex));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Sex.StartsWith(sex));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Sex.EndsWith(sex));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Sex.Contains(sex) == false);
                case ContainmentOperator.NotEquals:
                    return sex == null 
                        ? queryable.Where(p => p.Sex != null) 
                        : queryable.Where(p => p.Sex != sex);
                default:
                    return sex == null 
                        ? queryable.Where(p => p.Sex == null) 
                        : queryable.Where(p => p.Sex == sex);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Sex"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sex">Sex to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> BySex(this IQueryable<Abeced.Data.Person> queryable, System.String sex, params System.String[] additionalValues)
        {
            var sexList = new List<System.String> { sex };

            if (additionalValues != null)
                sexList.AddRange(additionalValues);
            else
                sexList.Add(null);

            if (sexList.Count == 1)
                return queryable.BySex(sexList[0]);

            return queryable.BySex(sexList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.Sex"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> BySex(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("Sex", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.UserPreferencesXml"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userPreferencesXml">UserPreferencesXml to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByUserPreferencesXml(this IQueryable<Abeced.Data.Person> queryable, System.String userPreferencesXml)
        {
            // support nulls
            return userPreferencesXml == null 
                ? queryable.Where(p => p.UserPreferencesXml == null) 
                : queryable.Where(p => p.UserPreferencesXml == userPreferencesXml);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.UserPreferencesXml"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userPreferencesXml">UserPreferencesXml to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByUserPreferencesXml(this IQueryable<Abeced.Data.Person> queryable, ContainmentOperator containmentOperator, System.String userPreferencesXml)
        {
            if (userPreferencesXml == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userPreferencesXml", "Parameter 'userPreferencesXml' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.UserPreferencesXml.Contains(userPreferencesXml));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.UserPreferencesXml.StartsWith(userPreferencesXml));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.UserPreferencesXml.EndsWith(userPreferencesXml));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.UserPreferencesXml.Contains(userPreferencesXml) == false);
                case ContainmentOperator.NotEquals:
                    return userPreferencesXml == null 
                        ? queryable.Where(p => p.UserPreferencesXml != null) 
                        : queryable.Where(p => p.UserPreferencesXml != userPreferencesXml);
                default:
                    return userPreferencesXml == null 
                        ? queryable.Where(p => p.UserPreferencesXml == null) 
                        : queryable.Where(p => p.UserPreferencesXml == userPreferencesXml);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.UserPreferencesXml"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userPreferencesXml">UserPreferencesXml to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByUserPreferencesXml(this IQueryable<Abeced.Data.Person> queryable, System.String userPreferencesXml, params System.String[] additionalValues)
        {
            var userPreferencesXmlList = new List<System.String> { userPreferencesXml };

            if (additionalValues != null)
                userPreferencesXmlList.AddRange(additionalValues);
            else
                userPreferencesXmlList.Add(null);

            if (userPreferencesXmlList.Count == 1)
                return queryable.ByUserPreferencesXml(userPreferencesXmlList[0]);

            return queryable.ByUserPreferencesXml(userPreferencesXmlList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Person.UserPreferencesXml"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Person> ByUserPreferencesXml(this IQueryable<Abeced.Data.Person> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Person, bool>("UserPreferencesXml", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
