#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for Messageofday.
    /// </summary>
    public static partial class MessageofdayExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.Messageofday GetByKey(this IQueryable<Abeced.Data.Messageofday> queryable
            , System.String identification
            )
        {
            return queryable
                .Where(m => m.Identification == identification)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByIdentification(this IQueryable<Abeced.Data.Messageofday> queryable, System.String identification)
        {
            return queryable.Where(m => m.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByIdentification(this IQueryable<Abeced.Data.Messageofday> queryable, ContainmentOperator containmentOperator, System.String identification)
        {
            if (identification == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("identification", "Parameter 'identification' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(m => m.Identification.Contains(identification));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(m => m.Identification.StartsWith(identification));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(m => m.Identification.EndsWith(identification));
                case ContainmentOperator.NotContains:
                    return queryable.Where(m => m.Identification.Contains(identification) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(m => m.Identification != identification);
                default:
                    return queryable.Where(m => m.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByIdentification(this IQueryable<Abeced.Data.Messageofday> queryable, System.String identification, params System.String[] additionalValues)
        {
            var identificationList = new List<System.String> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByIdentification(this IQueryable<Abeced.Data.Messageofday> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(m => values.Contains(m.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Msgdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="msgdate">Msgdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByMsgdate(this IQueryable<Abeced.Data.Messageofday> queryable, System.DateTime msgdate)
        {
            return queryable.Where(m => m.Msgdate == msgdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Msgdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="msgdate">Msgdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByMsgdate(this IQueryable<Abeced.Data.Messageofday> queryable, ComparisonOperator comparisonOperator, System.DateTime msgdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(m => m.Msgdate > msgdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(m => m.Msgdate >= msgdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(m => m.Msgdate < msgdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(m => m.Msgdate <= msgdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(m => m.Msgdate != msgdate);
                default:
                    return queryable.Where(m => m.Msgdate == msgdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Msgdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="msgdate">Msgdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByMsgdate(this IQueryable<Abeced.Data.Messageofday> queryable, System.DateTime msgdate, params System.DateTime[] additionalValues)
        {
            var msgdateList = new List<System.DateTime> { msgdate };

            if (additionalValues != null)
                msgdateList.AddRange(additionalValues);

            if (msgdateList.Count == 1)
                return queryable.ByMsgdate(msgdateList[0]);

            return queryable.ByMsgdate(msgdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Msgdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByMsgdate(this IQueryable<Abeced.Data.Messageofday> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(m => values.Contains(m.Msgdate));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Msgtext"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="msgtext">Msgtext to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByMsgtext(this IQueryable<Abeced.Data.Messageofday> queryable, System.String msgtext)
        {
            return queryable.Where(m => m.Msgtext == msgtext);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Msgtext"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="msgtext">Msgtext to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByMsgtext(this IQueryable<Abeced.Data.Messageofday> queryable, ContainmentOperator containmentOperator, System.String msgtext)
        {
            if (msgtext == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("msgtext", "Parameter 'msgtext' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(m => m.Msgtext.Contains(msgtext));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(m => m.Msgtext.StartsWith(msgtext));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(m => m.Msgtext.EndsWith(msgtext));
                case ContainmentOperator.NotContains:
                    return queryable.Where(m => m.Msgtext.Contains(msgtext) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(m => m.Msgtext != msgtext);
                default:
                    return queryable.Where(m => m.Msgtext == msgtext);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Msgtext"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="msgtext">Msgtext to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByMsgtext(this IQueryable<Abeced.Data.Messageofday> queryable, System.String msgtext, params System.String[] additionalValues)
        {
            var msgtextList = new List<System.String> { msgtext };

            if (additionalValues != null)
                msgtextList.AddRange(additionalValues);

            if (msgtextList.Count == 1)
                return queryable.ByMsgtext(msgtextList[0]);

            return queryable.ByMsgtext(msgtextList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Msgtext"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByMsgtext(this IQueryable<Abeced.Data.Messageofday> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(m => values.Contains(m.Msgtext));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Entryby"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="entryby">Entryby to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByEntryby(this IQueryable<Abeced.Data.Messageofday> queryable, System.String entryby)
        {
            // support nulls
            return entryby == null 
                ? queryable.Where(m => m.Entryby == null) 
                : queryable.Where(m => m.Entryby == entryby);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Entryby"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="entryby">Entryby to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByEntryby(this IQueryable<Abeced.Data.Messageofday> queryable, ContainmentOperator containmentOperator, System.String entryby)
        {
            if (entryby == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("entryby", "Parameter 'entryby' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(m => m.Entryby.Contains(entryby));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(m => m.Entryby.StartsWith(entryby));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(m => m.Entryby.EndsWith(entryby));
                case ContainmentOperator.NotContains:
                    return queryable.Where(m => m.Entryby.Contains(entryby) == false);
                case ContainmentOperator.NotEquals:
                    return entryby == null 
                        ? queryable.Where(m => m.Entryby != null) 
                        : queryable.Where(m => m.Entryby != entryby);
                default:
                    return entryby == null 
                        ? queryable.Where(m => m.Entryby == null) 
                        : queryable.Where(m => m.Entryby == entryby);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Entryby"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="entryby">Entryby to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByEntryby(this IQueryable<Abeced.Data.Messageofday> queryable, System.String entryby, params System.String[] additionalValues)
        {
            var entrybyList = new List<System.String> { entryby };

            if (additionalValues != null)
                entrybyList.AddRange(additionalValues);
            else
                entrybyList.Add(null);

            if (entrybyList.Count == 1)
                return queryable.ByEntryby(entrybyList[0]);

            return queryable.ByEntryby(entrybyList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Entryby"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByEntryby(this IQueryable<Abeced.Data.Messageofday> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Messageofday, bool>("Entryby", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Entrydate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="entrydate">Entrydate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByEntrydate(this IQueryable<Abeced.Data.Messageofday> queryable, System.DateTime entrydate)
        {
            return queryable.Where(m => m.Entrydate == entrydate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Entrydate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="entrydate">Entrydate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByEntrydate(this IQueryable<Abeced.Data.Messageofday> queryable, ComparisonOperator comparisonOperator, System.DateTime entrydate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(m => m.Entrydate > entrydate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(m => m.Entrydate >= entrydate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(m => m.Entrydate < entrydate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(m => m.Entrydate <= entrydate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(m => m.Entrydate != entrydate);
                default:
                    return queryable.Where(m => m.Entrydate == entrydate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Entrydate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="entrydate">Entrydate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByEntrydate(this IQueryable<Abeced.Data.Messageofday> queryable, System.DateTime entrydate, params System.DateTime[] additionalValues)
        {
            var entrydateList = new List<System.DateTime> { entrydate };

            if (additionalValues != null)
                entrydateList.AddRange(additionalValues);

            if (entrydateList.Count == 1)
                return queryable.ByEntrydate(entrydateList[0]);

            return queryable.ByEntrydate(entrydateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Messageofday.Entrydate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Messageofday> ByEntrydate(this IQueryable<Abeced.Data.Messageofday> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(m => values.Contains(m.Entrydate));
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
