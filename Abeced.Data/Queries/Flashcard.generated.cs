#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for Flashcard.
    /// </summary>
    public static partial class FlashcardExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.Flashcard GetByKey(this IQueryable<Abeced.Data.Flashcard> queryable
            , System.String identification
            )
        {
            return queryable
                .Where(f => f.Identification == identification)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByIdentification(this IQueryable<Abeced.Data.Flashcard> queryable, System.String identification)
        {
            return queryable.Where(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByIdentification(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String identification)
        {
            if (identification == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("identification", "Parameter 'identification' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Identification.Contains(identification));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Identification.StartsWith(identification));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Identification.EndsWith(identification));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Identification.Contains(identification) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.Identification != identification);
                default:
                    return queryable.Where(f => f.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByIdentification(this IQueryable<Abeced.Data.Flashcard> queryable, System.String identification, params System.String[] additionalValues)
        {
            var identificationList = new List<System.String> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByIdentification(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Question"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="question">Question to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestion(this IQueryable<Abeced.Data.Flashcard> queryable, System.String question)
        {
            return queryable.Where(f => f.Question == question);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Question"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="question">Question to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestion(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String question)
        {
            if (question == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("question", "Parameter 'question' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Question.Contains(question));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Question.StartsWith(question));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Question.EndsWith(question));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Question.Contains(question) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.Question != question);
                default:
                    return queryable.Where(f => f.Question == question);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Question"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="question">Question to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestion(this IQueryable<Abeced.Data.Flashcard> queryable, System.String question, params System.String[] additionalValues)
        {
            var questionList = new List<System.String> { question };

            if (additionalValues != null)
                questionList.AddRange(additionalValues);

            if (questionList.Count == 1)
                return queryable.ByQuestion(questionList[0]);

            return queryable.ByQuestion(questionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Question"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestion(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.Question));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Answer"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answer">Answer to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswer(this IQueryable<Abeced.Data.Flashcard> queryable, System.String answer)
        {
            return queryable.Where(f => f.Answer == answer);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Answer"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answer">Answer to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswer(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String answer)
        {
            if (answer == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("answer", "Parameter 'answer' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Answer.Contains(answer));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Answer.StartsWith(answer));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Answer.EndsWith(answer));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Answer.Contains(answer) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.Answer != answer);
                default:
                    return queryable.Where(f => f.Answer == answer);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Answer"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answer">Answer to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswer(this IQueryable<Abeced.Data.Flashcard> queryable, System.String answer, params System.String[] additionalValues)
        {
            var answerList = new List<System.String> { answer };

            if (additionalValues != null)
                answerList.AddRange(additionalValues);

            if (answerList.Count == 1)
                return queryable.ByAnswer(answerList[0]);

            return queryable.ByAnswer(answerList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Answer"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswer(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.Answer));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Factsheet"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factsheet">Factsheet to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactsheet(this IQueryable<Abeced.Data.Flashcard> queryable, System.String factsheet)
        {
            // support nulls
            return factsheet == null 
                ? queryable.Where(f => f.Factsheet == null) 
                : queryable.Where(f => f.Factsheet == factsheet);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Factsheet"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factsheet">Factsheet to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactsheet(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String factsheet)
        {
            if (factsheet == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("factsheet", "Parameter 'factsheet' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Factsheet.Contains(factsheet));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Factsheet.StartsWith(factsheet));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Factsheet.EndsWith(factsheet));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Factsheet.Contains(factsheet) == false);
                case ContainmentOperator.NotEquals:
                    return factsheet == null 
                        ? queryable.Where(f => f.Factsheet != null) 
                        : queryable.Where(f => f.Factsheet != factsheet);
                default:
                    return factsheet == null 
                        ? queryable.Where(f => f.Factsheet == null) 
                        : queryable.Where(f => f.Factsheet == factsheet);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Factsheet"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factsheet">Factsheet to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactsheet(this IQueryable<Abeced.Data.Flashcard> queryable, System.String factsheet, params System.String[] additionalValues)
        {
            var factsheetList = new List<System.String> { factsheet };

            if (additionalValues != null)
                factsheetList.AddRange(additionalValues);
            else
                factsheetList.Add(null);

            if (factsheetList.Count == 1)
                return queryable.ByFactsheet(factsheetList[0]);

            return queryable.ByFactsheet(factsheetList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Factsheet"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactsheet(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("Factsheet", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByCategory(this IQueryable<Abeced.Data.Flashcard> queryable, System.String category)
        {
            return queryable.Where(f => f.Category == category);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByCategory(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String category)
        {
            if (category == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("category", "Parameter 'category' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Category.Contains(category));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Category.StartsWith(category));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Category.EndsWith(category));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Category.Contains(category) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.Category != category);
                default:
                    return queryable.Where(f => f.Category == category);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="category">Category to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByCategory(this IQueryable<Abeced.Data.Flashcard> queryable, System.String category, params System.String[] additionalValues)
        {
            var categoryList = new List<System.String> { category };

            if (additionalValues != null)
                categoryList.AddRange(additionalValues);

            if (categoryList.Count == 1)
                return queryable.ByCategory(categoryList[0]);

            return queryable.ByCategory(categoryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Category"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByCategory(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.Category));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.UploadedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadedBy">UploadedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByUploadedBy(this IQueryable<Abeced.Data.Flashcard> queryable, System.String uploadedBy)
        {
            return queryable.Where(f => f.UploadedBy == uploadedBy);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.UploadedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadedBy">UploadedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByUploadedBy(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String uploadedBy)
        {
            if (uploadedBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("uploadedBy", "Parameter 'uploadedBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.UploadedBy.Contains(uploadedBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.UploadedBy.StartsWith(uploadedBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.UploadedBy.EndsWith(uploadedBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.UploadedBy.Contains(uploadedBy) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.UploadedBy != uploadedBy);
                default:
                    return queryable.Where(f => f.UploadedBy == uploadedBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.UploadedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadedBy">UploadedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByUploadedBy(this IQueryable<Abeced.Data.Flashcard> queryable, System.String uploadedBy, params System.String[] additionalValues)
        {
            var uploadedByList = new List<System.String> { uploadedBy };

            if (additionalValues != null)
                uploadedByList.AddRange(additionalValues);

            if (uploadedByList.Count == 1)
                return queryable.ByUploadedBy(uploadedByList[0]);

            return queryable.ByUploadedBy(uploadedByList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.UploadedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByUploadedBy(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.UploadedBy));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.UploadDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadDate">UploadDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByUploadDate(this IQueryable<Abeced.Data.Flashcard> queryable, System.DateTime uploadDate)
        {
            return queryable.Where(f => f.UploadDate == uploadDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.UploadDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadDate">UploadDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByUploadDate(this IQueryable<Abeced.Data.Flashcard> queryable, ComparisonOperator comparisonOperator, System.DateTime uploadDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.UploadDate > uploadDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.UploadDate >= uploadDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.UploadDate < uploadDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.UploadDate <= uploadDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.UploadDate != uploadDate);
                default:
                    return queryable.Where(f => f.UploadDate == uploadDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.UploadDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadDate">UploadDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByUploadDate(this IQueryable<Abeced.Data.Flashcard> queryable, System.DateTime uploadDate, params System.DateTime[] additionalValues)
        {
            var uploadDateList = new List<System.DateTime> { uploadDate };

            if (additionalValues != null)
                uploadDateList.AddRange(additionalValues);

            if (uploadDateList.Count == 1)
                return queryable.ByUploadDate(uploadDateList[0]);

            return queryable.ByUploadDate(uploadDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.UploadDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByUploadDate(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(f => values.Contains(f.UploadDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Questiontype"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questiontype">Questiontype to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestiontype(this IQueryable<Abeced.Data.Flashcard> queryable, System.String questiontype)
        {
            // support nulls
            return questiontype == null 
                ? queryable.Where(f => f.Questiontype == null) 
                : queryable.Where(f => f.Questiontype == questiontype);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Questiontype"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questiontype">Questiontype to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestiontype(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String questiontype)
        {
            if (questiontype == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("questiontype", "Parameter 'questiontype' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Questiontype.Contains(questiontype));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Questiontype.StartsWith(questiontype));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Questiontype.EndsWith(questiontype));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Questiontype.Contains(questiontype) == false);
                case ContainmentOperator.NotEquals:
                    return questiontype == null 
                        ? queryable.Where(f => f.Questiontype != null) 
                        : queryable.Where(f => f.Questiontype != questiontype);
                default:
                    return questiontype == null 
                        ? queryable.Where(f => f.Questiontype == null) 
                        : queryable.Where(f => f.Questiontype == questiontype);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Questiontype"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questiontype">Questiontype to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestiontype(this IQueryable<Abeced.Data.Flashcard> queryable, System.String questiontype, params System.String[] additionalValues)
        {
            var questiontypeList = new List<System.String> { questiontype };

            if (additionalValues != null)
                questiontypeList.AddRange(additionalValues);
            else
                questiontypeList.Add(null);

            if (questiontypeList.Count == 1)
                return queryable.ByQuestiontype(questiontypeList[0]);

            return queryable.ByQuestiontype(questiontypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Questiontype"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestiontype(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("Questiontype", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.SeriesId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesId">SeriesId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> BySeriesId(this IQueryable<Abeced.Data.Flashcard> queryable, System.String seriesId)
        {
            // support nulls
            return seriesId == null 
                ? queryable.Where(f => f.SeriesId == null) 
                : queryable.Where(f => f.SeriesId == seriesId);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.SeriesId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesId">SeriesId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> BySeriesId(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String seriesId)
        {
            if (seriesId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("seriesId", "Parameter 'seriesId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.SeriesId.Contains(seriesId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.SeriesId.StartsWith(seriesId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.SeriesId.EndsWith(seriesId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.SeriesId.Contains(seriesId) == false);
                case ContainmentOperator.NotEquals:
                    return seriesId == null 
                        ? queryable.Where(f => f.SeriesId != null) 
                        : queryable.Where(f => f.SeriesId != seriesId);
                default:
                    return seriesId == null 
                        ? queryable.Where(f => f.SeriesId == null) 
                        : queryable.Where(f => f.SeriesId == seriesId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.SeriesId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesId">SeriesId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> BySeriesId(this IQueryable<Abeced.Data.Flashcard> queryable, System.String seriesId, params System.String[] additionalValues)
        {
            var seriesIdList = new List<System.String> { seriesId };

            if (additionalValues != null)
                seriesIdList.AddRange(additionalValues);
            else
                seriesIdList.Add(null);

            if (seriesIdList.Count == 1)
                return queryable.BySeriesId(seriesIdList[0]);

            return queryable.BySeriesId(seriesIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.SeriesId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> BySeriesId(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("SeriesId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.SeriesOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesOrder">SeriesOrder to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> BySeriesOrder(this IQueryable<Abeced.Data.Flashcard> queryable, System.Int32? seriesOrder)
        {
            // support nulls
            return seriesOrder == null 
                ? queryable.Where(f => f.SeriesOrder == null) 
                : queryable.Where(f => f.SeriesOrder == seriesOrder);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.SeriesOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesOrder">SeriesOrder to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> BySeriesOrder(this IQueryable<Abeced.Data.Flashcard> queryable, ComparisonOperator comparisonOperator, System.Int32? seriesOrder)
        {
            if (seriesOrder == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("seriesOrder", "Parameter 'seriesOrder' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.SeriesOrder > seriesOrder);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.SeriesOrder >= seriesOrder);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.SeriesOrder < seriesOrder);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.SeriesOrder <= seriesOrder);
                case ComparisonOperator.NotEquals:
                    return seriesOrder == null 
                        ? queryable.Where(f => f.SeriesOrder != null) 
                        : queryable.Where(f => f.SeriesOrder != seriesOrder);
                default:
                    return seriesOrder == null 
                        ? queryable.Where(f => f.SeriesOrder == null) 
                        : queryable.Where(f => f.SeriesOrder == seriesOrder);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.SeriesOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesOrder">SeriesOrder to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> BySeriesOrder(this IQueryable<Abeced.Data.Flashcard> queryable, System.Int32? seriesOrder, params System.Int32?[] additionalValues)
        {
            var seriesOrderList = new List<System.Int32?> { seriesOrder };

            if (additionalValues != null)
                seriesOrderList.AddRange(additionalValues);
            else
                seriesOrderList.Add(null);

            if (seriesOrderList.Count == 1)
                return queryable.BySeriesOrder(seriesOrderList[0]);

            return queryable.BySeriesOrder(seriesOrderList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.SeriesOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> BySeriesOrder(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("SeriesOrder", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Approvedby"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approvedby">Approvedby to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApprovedby(this IQueryable<Abeced.Data.Flashcard> queryable, System.String approvedby)
        {
            // support nulls
            return approvedby == null 
                ? queryable.Where(f => f.Approvedby == null) 
                : queryable.Where(f => f.Approvedby == approvedby);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Approvedby"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approvedby">Approvedby to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApprovedby(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String approvedby)
        {
            if (approvedby == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("approvedby", "Parameter 'approvedby' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Approvedby.Contains(approvedby));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Approvedby.StartsWith(approvedby));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Approvedby.EndsWith(approvedby));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Approvedby.Contains(approvedby) == false);
                case ContainmentOperator.NotEquals:
                    return approvedby == null 
                        ? queryable.Where(f => f.Approvedby != null) 
                        : queryable.Where(f => f.Approvedby != approvedby);
                default:
                    return approvedby == null 
                        ? queryable.Where(f => f.Approvedby == null) 
                        : queryable.Where(f => f.Approvedby == approvedby);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Approvedby"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approvedby">Approvedby to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApprovedby(this IQueryable<Abeced.Data.Flashcard> queryable, System.String approvedby, params System.String[] additionalValues)
        {
            var approvedbyList = new List<System.String> { approvedby };

            if (additionalValues != null)
                approvedbyList.AddRange(additionalValues);
            else
                approvedbyList.Add(null);

            if (approvedbyList.Count == 1)
                return queryable.ByApprovedby(approvedbyList[0]);

            return queryable.ByApprovedby(approvedbyList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Approvedby"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApprovedby(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("Approvedby", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.ApprovedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approvedDate">ApprovedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApprovedDate(this IQueryable<Abeced.Data.Flashcard> queryable, System.DateTime? approvedDate)
        {
            // support nulls
            return approvedDate == null 
                ? queryable.Where(f => f.ApprovedDate == null) 
                : queryable.Where(f => f.ApprovedDate == approvedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.ApprovedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approvedDate">ApprovedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApprovedDate(this IQueryable<Abeced.Data.Flashcard> queryable, ComparisonOperator comparisonOperator, System.DateTime? approvedDate)
        {
            if (approvedDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("approvedDate", "Parameter 'approvedDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.ApprovedDate > approvedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.ApprovedDate >= approvedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.ApprovedDate < approvedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.ApprovedDate <= approvedDate);
                case ComparisonOperator.NotEquals:
                    return approvedDate == null 
                        ? queryable.Where(f => f.ApprovedDate != null) 
                        : queryable.Where(f => f.ApprovedDate != approvedDate);
                default:
                    return approvedDate == null 
                        ? queryable.Where(f => f.ApprovedDate == null) 
                        : queryable.Where(f => f.ApprovedDate == approvedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.ApprovedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approvedDate">ApprovedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApprovedDate(this IQueryable<Abeced.Data.Flashcard> queryable, System.DateTime? approvedDate, params System.DateTime?[] additionalValues)
        {
            var approvedDateList = new List<System.DateTime?> { approvedDate };

            if (additionalValues != null)
                approvedDateList.AddRange(additionalValues);
            else
                approvedDateList.Add(null);

            if (approvedDateList.Count == 1)
                return queryable.ByApprovedDate(approvedDateList[0]);

            return queryable.ByApprovedDate(approvedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.ApprovedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApprovedDate(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("ApprovedDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Approved"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approved">Approved to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApproved(this IQueryable<Abeced.Data.Flashcard> queryable, System.Boolean? approved)
        {
            // support nulls
            return approved == null 
                ? queryable.Where(f => f.Approved == null) 
                : queryable.Where(f => f.Approved == approved);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Approved"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approved">Approved to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApproved(this IQueryable<Abeced.Data.Flashcard> queryable, ComparisonOperator comparisonOperator, System.Boolean? approved)
        {
            if (approved == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("approved", "Parameter 'approved' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return approved == null 
                        ? queryable.Where(f => f.Approved != null) 
                        : queryable.Where(f => f.Approved != approved);
                default:
                    return approved == null 
                        ? queryable.Where(f => f.Approved == null) 
                        : queryable.Where(f => f.Approved == approved);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Approved"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="approved">Approved to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApproved(this IQueryable<Abeced.Data.Flashcard> queryable, System.Boolean? approved, params System.Boolean?[] additionalValues)
        {
            var approvedList = new List<System.Boolean?> { approved };

            if (additionalValues != null)
                approvedList.AddRange(additionalValues);
            else
                approvedList.Add(null);

            if (approvedList.Count == 1)
                return queryable.ByApproved(approvedList[0]);

            return queryable.ByApproved(approvedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.Approved"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByApproved(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("Approved", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.FactImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factImage">FactImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactImage(this IQueryable<Abeced.Data.Flashcard> queryable, System.String factImage)
        {
            // support nulls
            return factImage == null 
                ? queryable.Where(f => f.FactImage == null) 
                : queryable.Where(f => f.FactImage == factImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.FactImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factImage">FactImage to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactImage(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String factImage)
        {
            if (factImage == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("factImage", "Parameter 'factImage' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.FactImage.Contains(factImage));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.FactImage.StartsWith(factImage));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.FactImage.EndsWith(factImage));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.FactImage.Contains(factImage) == false);
                case ContainmentOperator.NotEquals:
                    return factImage == null 
                        ? queryable.Where(f => f.FactImage != null) 
                        : queryable.Where(f => f.FactImage != factImage);
                default:
                    return factImage == null 
                        ? queryable.Where(f => f.FactImage == null) 
                        : queryable.Where(f => f.FactImage == factImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.FactImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factImage">FactImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactImage(this IQueryable<Abeced.Data.Flashcard> queryable, System.String factImage, params System.String[] additionalValues)
        {
            var factImageList = new List<System.String> { factImage };

            if (additionalValues != null)
                factImageList.AddRange(additionalValues);
            else
                factImageList.Add(null);

            if (factImageList.Count == 1)
                return queryable.ByFactImage(factImageList[0]);

            return queryable.ByFactImage(factImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.FactImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactImage(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("FactImage", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.FactAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factAudio">FactAudio to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactAudio(this IQueryable<Abeced.Data.Flashcard> queryable, System.String factAudio)
        {
            // support nulls
            return factAudio == null 
                ? queryable.Where(f => f.FactAudio == null) 
                : queryable.Where(f => f.FactAudio == factAudio);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.FactAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factAudio">FactAudio to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactAudio(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String factAudio)
        {
            if (factAudio == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("factAudio", "Parameter 'factAudio' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.FactAudio.Contains(factAudio));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.FactAudio.StartsWith(factAudio));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.FactAudio.EndsWith(factAudio));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.FactAudio.Contains(factAudio) == false);
                case ContainmentOperator.NotEquals:
                    return factAudio == null 
                        ? queryable.Where(f => f.FactAudio != null) 
                        : queryable.Where(f => f.FactAudio != factAudio);
                default:
                    return factAudio == null 
                        ? queryable.Where(f => f.FactAudio == null) 
                        : queryable.Where(f => f.FactAudio == factAudio);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.FactAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="factAudio">FactAudio to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactAudio(this IQueryable<Abeced.Data.Flashcard> queryable, System.String factAudio, params System.String[] additionalValues)
        {
            var factAudioList = new List<System.String> { factAudio };

            if (additionalValues != null)
                factAudioList.AddRange(additionalValues);
            else
                factAudioList.Add(null);

            if (factAudioList.Count == 1)
                return queryable.ByFactAudio(factAudioList[0]);

            return queryable.ByFactAudio(factAudioList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.FactAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByFactAudio(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("FactAudio", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.QuestionImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questionImage">QuestionImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestionImage(this IQueryable<Abeced.Data.Flashcard> queryable, System.String questionImage)
        {
            // support nulls
            return questionImage == null 
                ? queryable.Where(f => f.QuestionImage == null) 
                : queryable.Where(f => f.QuestionImage == questionImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.QuestionImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questionImage">QuestionImage to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestionImage(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String questionImage)
        {
            if (questionImage == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("questionImage", "Parameter 'questionImage' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.QuestionImage.Contains(questionImage));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.QuestionImage.StartsWith(questionImage));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.QuestionImage.EndsWith(questionImage));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.QuestionImage.Contains(questionImage) == false);
                case ContainmentOperator.NotEquals:
                    return questionImage == null 
                        ? queryable.Where(f => f.QuestionImage != null) 
                        : queryable.Where(f => f.QuestionImage != questionImage);
                default:
                    return questionImage == null 
                        ? queryable.Where(f => f.QuestionImage == null) 
                        : queryable.Where(f => f.QuestionImage == questionImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.QuestionImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questionImage">QuestionImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestionImage(this IQueryable<Abeced.Data.Flashcard> queryable, System.String questionImage, params System.String[] additionalValues)
        {
            var questionImageList = new List<System.String> { questionImage };

            if (additionalValues != null)
                questionImageList.AddRange(additionalValues);
            else
                questionImageList.Add(null);

            if (questionImageList.Count == 1)
                return queryable.ByQuestionImage(questionImageList[0]);

            return queryable.ByQuestionImage(questionImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.QuestionImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestionImage(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("QuestionImage", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.AnswerImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answerImage">AnswerImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswerImage(this IQueryable<Abeced.Data.Flashcard> queryable, System.String answerImage)
        {
            // support nulls
            return answerImage == null 
                ? queryable.Where(f => f.AnswerImage == null) 
                : queryable.Where(f => f.AnswerImage == answerImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.AnswerImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answerImage">AnswerImage to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswerImage(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String answerImage)
        {
            if (answerImage == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("answerImage", "Parameter 'answerImage' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.AnswerImage.Contains(answerImage));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.AnswerImage.StartsWith(answerImage));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.AnswerImage.EndsWith(answerImage));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.AnswerImage.Contains(answerImage) == false);
                case ContainmentOperator.NotEquals:
                    return answerImage == null 
                        ? queryable.Where(f => f.AnswerImage != null) 
                        : queryable.Where(f => f.AnswerImage != answerImage);
                default:
                    return answerImage == null 
                        ? queryable.Where(f => f.AnswerImage == null) 
                        : queryable.Where(f => f.AnswerImage == answerImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.AnswerImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answerImage">AnswerImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswerImage(this IQueryable<Abeced.Data.Flashcard> queryable, System.String answerImage, params System.String[] additionalValues)
        {
            var answerImageList = new List<System.String> { answerImage };

            if (additionalValues != null)
                answerImageList.AddRange(additionalValues);
            else
                answerImageList.Add(null);

            if (answerImageList.Count == 1)
                return queryable.ByAnswerImage(answerImageList[0]);

            return queryable.ByAnswerImage(answerImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.AnswerImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswerImage(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("AnswerImage", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.QuestionAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questionAudio">QuestionAudio to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestionAudio(this IQueryable<Abeced.Data.Flashcard> queryable, System.String questionAudio)
        {
            // support nulls
            return questionAudio == null 
                ? queryable.Where(f => f.QuestionAudio == null) 
                : queryable.Where(f => f.QuestionAudio == questionAudio);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.QuestionAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questionAudio">QuestionAudio to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestionAudio(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String questionAudio)
        {
            if (questionAudio == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("questionAudio", "Parameter 'questionAudio' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.QuestionAudio.Contains(questionAudio));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.QuestionAudio.StartsWith(questionAudio));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.QuestionAudio.EndsWith(questionAudio));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.QuestionAudio.Contains(questionAudio) == false);
                case ContainmentOperator.NotEquals:
                    return questionAudio == null 
                        ? queryable.Where(f => f.QuestionAudio != null) 
                        : queryable.Where(f => f.QuestionAudio != questionAudio);
                default:
                    return questionAudio == null 
                        ? queryable.Where(f => f.QuestionAudio == null) 
                        : queryable.Where(f => f.QuestionAudio == questionAudio);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.QuestionAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="questionAudio">QuestionAudio to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestionAudio(this IQueryable<Abeced.Data.Flashcard> queryable, System.String questionAudio, params System.String[] additionalValues)
        {
            var questionAudioList = new List<System.String> { questionAudio };

            if (additionalValues != null)
                questionAudioList.AddRange(additionalValues);
            else
                questionAudioList.Add(null);

            if (questionAudioList.Count == 1)
                return queryable.ByQuestionAudio(questionAudioList[0]);

            return queryable.ByQuestionAudio(questionAudioList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.QuestionAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByQuestionAudio(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("QuestionAudio", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.AnswerAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answerAudio">AnswerAudio to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswerAudio(this IQueryable<Abeced.Data.Flashcard> queryable, System.String answerAudio)
        {
            // support nulls
            return answerAudio == null 
                ? queryable.Where(f => f.AnswerAudio == null) 
                : queryable.Where(f => f.AnswerAudio == answerAudio);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.AnswerAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answerAudio">AnswerAudio to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswerAudio(this IQueryable<Abeced.Data.Flashcard> queryable, ContainmentOperator containmentOperator, System.String answerAudio)
        {
            if (answerAudio == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("answerAudio", "Parameter 'answerAudio' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.AnswerAudio.Contains(answerAudio));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.AnswerAudio.StartsWith(answerAudio));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.AnswerAudio.EndsWith(answerAudio));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.AnswerAudio.Contains(answerAudio) == false);
                case ContainmentOperator.NotEquals:
                    return answerAudio == null 
                        ? queryable.Where(f => f.AnswerAudio != null) 
                        : queryable.Where(f => f.AnswerAudio != answerAudio);
                default:
                    return answerAudio == null 
                        ? queryable.Where(f => f.AnswerAudio == null) 
                        : queryable.Where(f => f.AnswerAudio == answerAudio);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.AnswerAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="answerAudio">AnswerAudio to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswerAudio(this IQueryable<Abeced.Data.Flashcard> queryable, System.String answerAudio, params System.String[] additionalValues)
        {
            var answerAudioList = new List<System.String> { answerAudio };

            if (additionalValues != null)
                answerAudioList.AddRange(additionalValues);
            else
                answerAudioList.Add(null);

            if (answerAudioList.Count == 1)
                return queryable.ByAnswerAudio(answerAudioList[0]);

            return queryable.ByAnswerAudio(answerAudioList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Flashcard.AnswerAudio"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Flashcard> ByAnswerAudio(this IQueryable<Abeced.Data.Flashcard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Flashcard, bool>("AnswerAudio", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
