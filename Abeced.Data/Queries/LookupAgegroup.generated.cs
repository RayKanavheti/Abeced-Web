#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for LookupAgegroup.
    /// </summary>
    public static partial class LookupAgegroupExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.LookupAgegroup GetByKey(this IQueryable<Abeced.Data.LookupAgegroup> queryable
            , System.Int32 agroupid
            )
        {
            return queryable
                .Where(l => l.Agroupid == agroupid)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupAgegroup.Agroupid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="agroupid">Agroupid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupAgegroup> ByAgroupid(this IQueryable<Abeced.Data.LookupAgegroup> queryable, System.Int32 agroupid)
        {
            return queryable.Where(l => l.Agroupid == agroupid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupAgegroup.Agroupid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="agroupid">Agroupid to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupAgegroup> ByAgroupid(this IQueryable<Abeced.Data.LookupAgegroup> queryable, ComparisonOperator comparisonOperator, System.Int32 agroupid)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.Agroupid > agroupid);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.Agroupid >= agroupid);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.Agroupid < agroupid);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.Agroupid <= agroupid);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.Agroupid != agroupid);
                default:
                    return queryable.Where(l => l.Agroupid == agroupid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupAgegroup.Agroupid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="agroupid">Agroupid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupAgegroup> ByAgroupid(this IQueryable<Abeced.Data.LookupAgegroup> queryable, System.Int32 agroupid, params System.Int32[] additionalValues)
        {
            var agroupidList = new List<System.Int32> { agroupid };

            if (additionalValues != null)
                agroupidList.AddRange(additionalValues);

            if (agroupidList.Count == 1)
                return queryable.ByAgroupid(agroupidList[0]);

            return queryable.ByAgroupid(agroupidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupAgegroup.Agroupid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupAgegroup> ByAgroupid(this IQueryable<Abeced.Data.LookupAgegroup> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.Agroupid));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupAgegroup.Agegroup"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="agegroup">Agegroup to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupAgegroup> ByAgegroup(this IQueryable<Abeced.Data.LookupAgegroup> queryable, System.String agegroup)
        {
            return queryable.Where(l => l.Agegroup == agegroup);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupAgegroup.Agegroup"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="agegroup">Agegroup to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupAgegroup> ByAgegroup(this IQueryable<Abeced.Data.LookupAgegroup> queryable, ContainmentOperator containmentOperator, System.String agegroup)
        {
            if (agegroup == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("agegroup", "Parameter 'agegroup' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.Agegroup.Contains(agegroup));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.Agegroup.StartsWith(agegroup));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.Agegroup.EndsWith(agegroup));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.Agegroup.Contains(agegroup) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.Agegroup != agegroup);
                default:
                    return queryable.Where(l => l.Agegroup == agegroup);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupAgegroup.Agegroup"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="agegroup">Agegroup to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupAgegroup> ByAgegroup(this IQueryable<Abeced.Data.LookupAgegroup> queryable, System.String agegroup, params System.String[] additionalValues)
        {
            var agegroupList = new List<System.String> { agegroup };

            if (additionalValues != null)
                agegroupList.AddRange(additionalValues);

            if (agegroupList.Count == 1)
                return queryable.ByAgegroup(agegroupList[0]);

            return queryable.ByAgegroup(agegroupList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupAgegroup.Agegroup"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupAgegroup> ByAgegroup(this IQueryable<Abeced.Data.LookupAgegroup> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(l => values.Contains(l.Agegroup));
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
