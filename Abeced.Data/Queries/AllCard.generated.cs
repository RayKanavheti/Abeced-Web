#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for AllCard.
    /// </summary>
    public static partial class AllCardExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.AllCard GetByKey(this IQueryable<Abeced.Data.AllCard> queryable
            , System.String indCardId
            )
        {
            return queryable
                .Where(a => a.IndCardId == indCardId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.IndCardId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="indCardId">IndCardId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByIndCardId(this IQueryable<Abeced.Data.AllCard> queryable, System.String indCardId)
        {
            return queryable.Where(a => a.IndCardId == indCardId);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.IndCardId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="indCardId">IndCardId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByIndCardId(this IQueryable<Abeced.Data.AllCard> queryable, ContainmentOperator containmentOperator, System.String indCardId)
        {
            if (indCardId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("indCardId", "Parameter 'indCardId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.IndCardId.Contains(indCardId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.IndCardId.StartsWith(indCardId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.IndCardId.EndsWith(indCardId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.IndCardId.Contains(indCardId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.IndCardId != indCardId);
                default:
                    return queryable.Where(a => a.IndCardId == indCardId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.IndCardId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="indCardId">IndCardId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByIndCardId(this IQueryable<Abeced.Data.AllCard> queryable, System.String indCardId, params System.String[] additionalValues)
        {
            var indCardIdList = new List<System.String> { indCardId };

            if (additionalValues != null)
                indCardIdList.AddRange(additionalValues);

            if (indCardIdList.Count == 1)
                return queryable.ByIndCardId(indCardIdList[0]);

            return queryable.ByIndCardId(indCardIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.IndCardId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByIndCardId(this IQueryable<Abeced.Data.AllCard> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.IndCardId));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.CsessionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="csessionId">CsessionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByCsessionId(this IQueryable<Abeced.Data.AllCard> queryable, System.String csessionId)
        {
            return queryable.Where(a => a.CsessionId == csessionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.CsessionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="csessionId">CsessionId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByCsessionId(this IQueryable<Abeced.Data.AllCard> queryable, ContainmentOperator containmentOperator, System.String csessionId)
        {
            if (csessionId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("csessionId", "Parameter 'csessionId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.CsessionId.Contains(csessionId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.CsessionId.StartsWith(csessionId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.CsessionId.EndsWith(csessionId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.CsessionId.Contains(csessionId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.CsessionId != csessionId);
                default:
                    return queryable.Where(a => a.CsessionId == csessionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.CsessionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="csessionId">CsessionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByCsessionId(this IQueryable<Abeced.Data.AllCard> queryable, System.String csessionId, params System.String[] additionalValues)
        {
            var csessionIdList = new List<System.String> { csessionId };

            if (additionalValues != null)
                csessionIdList.AddRange(additionalValues);

            if (csessionIdList.Count == 1)
                return queryable.ByCsessionId(csessionIdList[0]);

            return queryable.ByCsessionId(csessionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.CsessionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByCsessionId(this IQueryable<Abeced.Data.AllCard> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.CsessionId));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.FlashcardId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flashcardId">FlashcardId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByFlashcardId(this IQueryable<Abeced.Data.AllCard> queryable, System.String flashcardId)
        {
            // support nulls
            return flashcardId == null 
                ? queryable.Where(a => a.FlashcardId == null) 
                : queryable.Where(a => a.FlashcardId == flashcardId);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.FlashcardId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flashcardId">FlashcardId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByFlashcardId(this IQueryable<Abeced.Data.AllCard> queryable, ContainmentOperator containmentOperator, System.String flashcardId)
        {
            if (flashcardId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("flashcardId", "Parameter 'flashcardId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FlashcardId.Contains(flashcardId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FlashcardId.StartsWith(flashcardId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FlashcardId.EndsWith(flashcardId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FlashcardId.Contains(flashcardId) == false);
                case ContainmentOperator.NotEquals:
                    return flashcardId == null 
                        ? queryable.Where(a => a.FlashcardId != null) 
                        : queryable.Where(a => a.FlashcardId != flashcardId);
                default:
                    return flashcardId == null 
                        ? queryable.Where(a => a.FlashcardId == null) 
                        : queryable.Where(a => a.FlashcardId == flashcardId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.FlashcardId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flashcardId">FlashcardId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByFlashcardId(this IQueryable<Abeced.Data.AllCard> queryable, System.String flashcardId, params System.String[] additionalValues)
        {
            var flashcardIdList = new List<System.String> { flashcardId };

            if (additionalValues != null)
                flashcardIdList.AddRange(additionalValues);
            else
                flashcardIdList.Add(null);

            if (flashcardIdList.Count == 1)
                return queryable.ByFlashcardId(flashcardIdList[0]);

            return queryable.ByFlashcardId(flashcardIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.FlashcardId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByFlashcardId(this IQueryable<Abeced.Data.AllCard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.AllCard, bool>("FlashcardId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.CorrectAnswer"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="correctAnswer">CorrectAnswer to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByCorrectAnswer(this IQueryable<Abeced.Data.AllCard> queryable, System.Boolean correctAnswer)
        {
            return queryable.Where(a => a.CorrectAnswer == correctAnswer);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.CorrectAnswer"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="correctAnswer">CorrectAnswer to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByCorrectAnswer(this IQueryable<Abeced.Data.AllCard> queryable, ComparisonOperator comparisonOperator, System.Boolean correctAnswer)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.CorrectAnswer != correctAnswer);
                default:
                    return queryable.Where(a => a.CorrectAnswer == correctAnswer);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.CorrectAnswer"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="correctAnswer">CorrectAnswer to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByCorrectAnswer(this IQueryable<Abeced.Data.AllCard> queryable, System.Boolean correctAnswer, params System.Boolean[] additionalValues)
        {
            var correctAnswerList = new List<System.Boolean> { correctAnswer };

            if (additionalValues != null)
                correctAnswerList.AddRange(additionalValues);

            if (correctAnswerList.Count == 1)
                return queryable.ByCorrectAnswer(correctAnswerList[0]);

            return queryable.ByCorrectAnswer(correctAnswerList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.CorrectAnswer"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByCorrectAnswer(this IQueryable<Abeced.Data.AllCard> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(a => values.Contains(a.CorrectAnswer));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.ElapseTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="elapseTime">ElapseTime to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByElapseTime(this IQueryable<Abeced.Data.AllCard> queryable, System.Double? elapseTime)
        {
            // support nulls
            return elapseTime == null 
                ? queryable.Where(a => a.ElapseTime == null) 
                : queryable.Where(a => a.ElapseTime == elapseTime);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.ElapseTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="elapseTime">ElapseTime to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByElapseTime(this IQueryable<Abeced.Data.AllCard> queryable, ComparisonOperator comparisonOperator, System.Double? elapseTime)
        {
            if (elapseTime == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("elapseTime", "Parameter 'elapseTime' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ElapseTime > elapseTime);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ElapseTime >= elapseTime);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ElapseTime < elapseTime);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ElapseTime <= elapseTime);
                case ComparisonOperator.NotEquals:
                    return elapseTime == null 
                        ? queryable.Where(a => a.ElapseTime != null) 
                        : queryable.Where(a => a.ElapseTime != elapseTime);
                default:
                    return elapseTime == null 
                        ? queryable.Where(a => a.ElapseTime == null) 
                        : queryable.Where(a => a.ElapseTime == elapseTime);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.ElapseTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="elapseTime">ElapseTime to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByElapseTime(this IQueryable<Abeced.Data.AllCard> queryable, System.Double? elapseTime, params System.Double?[] additionalValues)
        {
            var elapseTimeList = new List<System.Double?> { elapseTime };

            if (additionalValues != null)
                elapseTimeList.AddRange(additionalValues);
            else
                elapseTimeList.Add(null);

            if (elapseTimeList.Count == 1)
                return queryable.ByElapseTime(elapseTimeList[0]);

            return queryable.ByElapseTime(elapseTimeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.ElapseTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByElapseTime(this IQueryable<Abeced.Data.AllCard> queryable, IEnumerable<System.Double?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.AllCard, bool>("ElapseTime", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.RevisionOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionOrder">RevisionOrder to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByRevisionOrder(this IQueryable<Abeced.Data.AllCard> queryable, System.String revisionOrder)
        {
            // support nulls
            return revisionOrder == null 
                ? queryable.Where(a => a.RevisionOrder == null) 
                : queryable.Where(a => a.RevisionOrder == revisionOrder);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.RevisionOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionOrder">RevisionOrder to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByRevisionOrder(this IQueryable<Abeced.Data.AllCard> queryable, ContainmentOperator containmentOperator, System.String revisionOrder)
        {
            if (revisionOrder == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("revisionOrder", "Parameter 'revisionOrder' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.RevisionOrder.Contains(revisionOrder));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.RevisionOrder.StartsWith(revisionOrder));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.RevisionOrder.EndsWith(revisionOrder));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.RevisionOrder.Contains(revisionOrder) == false);
                case ContainmentOperator.NotEquals:
                    return revisionOrder == null 
                        ? queryable.Where(a => a.RevisionOrder != null) 
                        : queryable.Where(a => a.RevisionOrder != revisionOrder);
                default:
                    return revisionOrder == null 
                        ? queryable.Where(a => a.RevisionOrder == null) 
                        : queryable.Where(a => a.RevisionOrder == revisionOrder);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.RevisionOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="revisionOrder">RevisionOrder to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByRevisionOrder(this IQueryable<Abeced.Data.AllCard> queryable, System.String revisionOrder, params System.String[] additionalValues)
        {
            var revisionOrderList = new List<System.String> { revisionOrder };

            if (additionalValues != null)
                revisionOrderList.AddRange(additionalValues);
            else
                revisionOrderList.Add(null);

            if (revisionOrderList.Count == 1)
                return queryable.ByRevisionOrder(revisionOrderList[0]);

            return queryable.ByRevisionOrder(revisionOrderList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.AllCard.RevisionOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.AllCard> ByRevisionOrder(this IQueryable<Abeced.Data.AllCard> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.AllCard, bool>("RevisionOrder", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
