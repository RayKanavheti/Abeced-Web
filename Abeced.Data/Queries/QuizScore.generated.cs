#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for QuizScore.
    /// </summary>
    public static partial class QuizScoreExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.QuizScore GetByKey(this IQueryable<Abeced.Data.QuizScore> queryable
            , System.String identification
            )
        {
            return queryable
                .Where(q => q.Identification == identification)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByIdentification(this IQueryable<Abeced.Data.QuizScore> queryable, System.String identification)
        {
            return queryable.Where(q => q.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByIdentification(this IQueryable<Abeced.Data.QuizScore> queryable, ContainmentOperator containmentOperator, System.String identification)
        {
            if (identification == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("identification", "Parameter 'identification' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(q => q.Identification.Contains(identification));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(q => q.Identification.StartsWith(identification));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(q => q.Identification.EndsWith(identification));
                case ContainmentOperator.NotContains:
                    return queryable.Where(q => q.Identification.Contains(identification) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(q => q.Identification != identification);
                default:
                    return queryable.Where(q => q.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByIdentification(this IQueryable<Abeced.Data.QuizScore> queryable, System.String identification, params System.String[] additionalValues)
        {
            var identificationList = new List<System.String> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByIdentification(this IQueryable<Abeced.Data.QuizScore> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(q => values.Contains(q.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByUsername(this IQueryable<Abeced.Data.QuizScore> queryable, System.String username)
        {
            // support nulls
            return username == null 
                ? queryable.Where(q => q.Username == null) 
                : queryable.Where(q => q.Username == username);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByUsername(this IQueryable<Abeced.Data.QuizScore> queryable, ContainmentOperator containmentOperator, System.String username)
        {
            if (username == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("username", "Parameter 'username' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(q => q.Username.Contains(username));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(q => q.Username.StartsWith(username));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(q => q.Username.EndsWith(username));
                case ContainmentOperator.NotContains:
                    return queryable.Where(q => q.Username.Contains(username) == false);
                case ContainmentOperator.NotEquals:
                    return username == null 
                        ? queryable.Where(q => q.Username != null) 
                        : queryable.Where(q => q.Username != username);
                default:
                    return username == null 
                        ? queryable.Where(q => q.Username == null) 
                        : queryable.Where(q => q.Username == username);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByUsername(this IQueryable<Abeced.Data.QuizScore> queryable, System.String username, params System.String[] additionalValues)
        {
            var usernameList = new List<System.String> { username };

            if (additionalValues != null)
                usernameList.AddRange(additionalValues);
            else
                usernameList.Add(null);

            if (usernameList.Count == 1)
                return queryable.ByUsername(usernameList[0]);

            return queryable.ByUsername(usernameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByUsername(this IQueryable<Abeced.Data.QuizScore> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.QuizScore, bool>("Username", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.CatId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catId">CatId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByCatId(this IQueryable<Abeced.Data.QuizScore> queryable, System.Int32? catId)
        {
            // support nulls
            return catId == null 
                ? queryable.Where(q => q.CatId == null) 
                : queryable.Where(q => q.CatId == catId);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.CatId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catId">CatId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByCatId(this IQueryable<Abeced.Data.QuizScore> queryable, ComparisonOperator comparisonOperator, System.Int32? catId)
        {
            if (catId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("catId", "Parameter 'catId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(q => q.CatId > catId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(q => q.CatId >= catId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(q => q.CatId < catId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(q => q.CatId <= catId);
                case ComparisonOperator.NotEquals:
                    return catId == null 
                        ? queryable.Where(q => q.CatId != null) 
                        : queryable.Where(q => q.CatId != catId);
                default:
                    return catId == null 
                        ? queryable.Where(q => q.CatId == null) 
                        : queryable.Where(q => q.CatId == catId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.CatId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catId">CatId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByCatId(this IQueryable<Abeced.Data.QuizScore> queryable, System.Int32? catId, params System.Int32?[] additionalValues)
        {
            var catIdList = new List<System.Int32?> { catId };

            if (additionalValues != null)
                catIdList.AddRange(additionalValues);
            else
                catIdList.Add(null);

            if (catIdList.Count == 1)
                return queryable.ByCatId(catIdList[0]);

            return queryable.ByCatId(catIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.CatId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByCatId(this IQueryable<Abeced.Data.QuizScore> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.QuizScore, bool>("CatId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.NumberOfQuestions"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numberOfQuestions">NumberOfQuestions to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByNumberOfQuestions(this IQueryable<Abeced.Data.QuizScore> queryable, System.Int32? numberOfQuestions)
        {
            // support nulls
            return numberOfQuestions == null 
                ? queryable.Where(q => q.NumberOfQuestions == null) 
                : queryable.Where(q => q.NumberOfQuestions == numberOfQuestions);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.NumberOfQuestions"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numberOfQuestions">NumberOfQuestions to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByNumberOfQuestions(this IQueryable<Abeced.Data.QuizScore> queryable, ComparisonOperator comparisonOperator, System.Int32? numberOfQuestions)
        {
            if (numberOfQuestions == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("numberOfQuestions", "Parameter 'numberOfQuestions' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(q => q.NumberOfQuestions > numberOfQuestions);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(q => q.NumberOfQuestions >= numberOfQuestions);
                case ComparisonOperator.LessThan:
                    return queryable.Where(q => q.NumberOfQuestions < numberOfQuestions);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(q => q.NumberOfQuestions <= numberOfQuestions);
                case ComparisonOperator.NotEquals:
                    return numberOfQuestions == null 
                        ? queryable.Where(q => q.NumberOfQuestions != null) 
                        : queryable.Where(q => q.NumberOfQuestions != numberOfQuestions);
                default:
                    return numberOfQuestions == null 
                        ? queryable.Where(q => q.NumberOfQuestions == null) 
                        : queryable.Where(q => q.NumberOfQuestions == numberOfQuestions);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.NumberOfQuestions"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numberOfQuestions">NumberOfQuestions to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByNumberOfQuestions(this IQueryable<Abeced.Data.QuizScore> queryable, System.Int32? numberOfQuestions, params System.Int32?[] additionalValues)
        {
            var numberOfQuestionsList = new List<System.Int32?> { numberOfQuestions };

            if (additionalValues != null)
                numberOfQuestionsList.AddRange(additionalValues);
            else
                numberOfQuestionsList.Add(null);

            if (numberOfQuestionsList.Count == 1)
                return queryable.ByNumberOfQuestions(numberOfQuestionsList[0]);

            return queryable.ByNumberOfQuestions(numberOfQuestionsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.NumberOfQuestions"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByNumberOfQuestions(this IQueryable<Abeced.Data.QuizScore> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.QuizScore, bool>("NumberOfQuestions", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Points"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="points">Points to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByPoints(this IQueryable<Abeced.Data.QuizScore> queryable, System.Decimal? points)
        {
            // support nulls
            return points == null 
                ? queryable.Where(q => q.Points == null) 
                : queryable.Where(q => q.Points == points);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Points"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="points">Points to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByPoints(this IQueryable<Abeced.Data.QuizScore> queryable, ComparisonOperator comparisonOperator, System.Decimal? points)
        {
            if (points == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("points", "Parameter 'points' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(q => q.Points > points);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(q => q.Points >= points);
                case ComparisonOperator.LessThan:
                    return queryable.Where(q => q.Points < points);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(q => q.Points <= points);
                case ComparisonOperator.NotEquals:
                    return points == null 
                        ? queryable.Where(q => q.Points != null) 
                        : queryable.Where(q => q.Points != points);
                default:
                    return points == null 
                        ? queryable.Where(q => q.Points == null) 
                        : queryable.Where(q => q.Points == points);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Points"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="points">Points to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByPoints(this IQueryable<Abeced.Data.QuizScore> queryable, System.Decimal? points, params System.Decimal?[] additionalValues)
        {
            var pointsList = new List<System.Decimal?> { points };

            if (additionalValues != null)
                pointsList.AddRange(additionalValues);
            else
                pointsList.Add(null);

            if (pointsList.Count == 1)
                return queryable.ByPoints(pointsList[0]);

            return queryable.ByPoints(pointsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.Points"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByPoints(this IQueryable<Abeced.Data.QuizScore> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.QuizScore, bool>("Points", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.DateTaken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateTaken">DateTaken to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByDateTaken(this IQueryable<Abeced.Data.QuizScore> queryable, System.DateTime? dateTaken)
        {
            // support nulls
            return dateTaken == null 
                ? queryable.Where(q => q.DateTaken == null) 
                : queryable.Where(q => q.DateTaken == dateTaken);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.DateTaken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateTaken">DateTaken to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByDateTaken(this IQueryable<Abeced.Data.QuizScore> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateTaken)
        {
            if (dateTaken == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateTaken", "Parameter 'dateTaken' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(q => q.DateTaken > dateTaken);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(q => q.DateTaken >= dateTaken);
                case ComparisonOperator.LessThan:
                    return queryable.Where(q => q.DateTaken < dateTaken);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(q => q.DateTaken <= dateTaken);
                case ComparisonOperator.NotEquals:
                    return dateTaken == null 
                        ? queryable.Where(q => q.DateTaken != null) 
                        : queryable.Where(q => q.DateTaken != dateTaken);
                default:
                    return dateTaken == null 
                        ? queryable.Where(q => q.DateTaken == null) 
                        : queryable.Where(q => q.DateTaken == dateTaken);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.DateTaken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateTaken">DateTaken to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByDateTaken(this IQueryable<Abeced.Data.QuizScore> queryable, System.DateTime? dateTaken, params System.DateTime?[] additionalValues)
        {
            var dateTakenList = new List<System.DateTime?> { dateTaken };

            if (additionalValues != null)
                dateTakenList.AddRange(additionalValues);
            else
                dateTakenList.Add(null);

            if (dateTakenList.Count == 1)
                return queryable.ByDateTaken(dateTakenList[0]);

            return queryable.ByDateTaken(dateTakenList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.DateTaken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByDateTaken(this IQueryable<Abeced.Data.QuizScore> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.QuizScore, bool>("DateTaken", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.TimeTaken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeTaken">TimeTaken to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByTimeTaken(this IQueryable<Abeced.Data.QuizScore> queryable, System.DateTime? timeTaken)
        {
            // support nulls
            return timeTaken == null 
                ? queryable.Where(q => q.TimeTaken == null) 
                : queryable.Where(q => q.TimeTaken == timeTaken);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.TimeTaken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeTaken">TimeTaken to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByTimeTaken(this IQueryable<Abeced.Data.QuizScore> queryable, ComparisonOperator comparisonOperator, System.DateTime? timeTaken)
        {
            if (timeTaken == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("timeTaken", "Parameter 'timeTaken' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(q => q.TimeTaken > timeTaken);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(q => q.TimeTaken >= timeTaken);
                case ComparisonOperator.LessThan:
                    return queryable.Where(q => q.TimeTaken < timeTaken);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(q => q.TimeTaken <= timeTaken);
                case ComparisonOperator.NotEquals:
                    return timeTaken == null 
                        ? queryable.Where(q => q.TimeTaken != null) 
                        : queryable.Where(q => q.TimeTaken != timeTaken);
                default:
                    return timeTaken == null 
                        ? queryable.Where(q => q.TimeTaken == null) 
                        : queryable.Where(q => q.TimeTaken == timeTaken);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.TimeTaken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeTaken">TimeTaken to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByTimeTaken(this IQueryable<Abeced.Data.QuizScore> queryable, System.DateTime? timeTaken, params System.DateTime?[] additionalValues)
        {
            var timeTakenList = new List<System.DateTime?> { timeTaken };

            if (additionalValues != null)
                timeTakenList.AddRange(additionalValues);
            else
                timeTakenList.Add(null);

            if (timeTakenList.Count == 1)
                return queryable.ByTimeTaken(timeTakenList[0]);

            return queryable.ByTimeTaken(timeTakenList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.QuizScore.TimeTaken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.QuizScore> ByTimeTaken(this IQueryable<Abeced.Data.QuizScore> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.QuizScore, bool>("TimeTaken", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
