#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for LookupCategory.
    /// </summary>
    public static partial class LookupCategoryExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.LookupCategory GetByKey(this IQueryable<Abeced.Data.LookupCategory> queryable
            , System.String catid
            )
        {
            return queryable
                .Where(l => l.Catid == catid)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.Catid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catid">Catid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatid(this IQueryable<Abeced.Data.LookupCategory> queryable, System.String catid)
        {
            return queryable.Where(l => l.Catid == catid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.Catid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catid">Catid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatid(this IQueryable<Abeced.Data.LookupCategory> queryable, ContainmentOperator containmentOperator, System.String catid)
        {
            if (catid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("catid", "Parameter 'catid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.Catid.Contains(catid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.Catid.StartsWith(catid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.Catid.EndsWith(catid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.Catid.Contains(catid) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.Catid != catid);
                default:
                    return queryable.Where(l => l.Catid == catid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.Catid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catid">Catid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatid(this IQueryable<Abeced.Data.LookupCategory> queryable, System.String catid, params System.String[] additionalValues)
        {
            var catidList = new List<System.String> { catid };

            if (additionalValues != null)
                catidList.AddRange(additionalValues);

            if (catidList.Count == 1)
                return queryable.ByCatid(catidList[0]);

            return queryable.ByCatid(catidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.Catid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatid(this IQueryable<Abeced.Data.LookupCategory> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(l => values.Contains(l.Catid));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.CatTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catTitle">CatTitle to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatTitle(this IQueryable<Abeced.Data.LookupCategory> queryable, System.String catTitle)
        {
            return queryable.Where(l => l.CatTitle == catTitle);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.CatTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catTitle">CatTitle to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatTitle(this IQueryable<Abeced.Data.LookupCategory> queryable, ContainmentOperator containmentOperator, System.String catTitle)
        {
            if (catTitle == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("catTitle", "Parameter 'catTitle' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.CatTitle.Contains(catTitle));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.CatTitle.StartsWith(catTitle));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.CatTitle.EndsWith(catTitle));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.CatTitle.Contains(catTitle) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.CatTitle != catTitle);
                default:
                    return queryable.Where(l => l.CatTitle == catTitle);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.CatTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catTitle">CatTitle to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatTitle(this IQueryable<Abeced.Data.LookupCategory> queryable, System.String catTitle, params System.String[] additionalValues)
        {
            var catTitleList = new List<System.String> { catTitle };

            if (additionalValues != null)
                catTitleList.AddRange(additionalValues);

            if (catTitleList.Count == 1)
                return queryable.ByCatTitle(catTitleList[0]);

            return queryable.ByCatTitle(catTitleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.CatTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatTitle(this IQueryable<Abeced.Data.LookupCategory> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(l => values.Contains(l.CatTitle));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.SubCatid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subCatid">SubCatid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> BySubCatid(this IQueryable<Abeced.Data.LookupCategory> queryable, System.String subCatid)
        {
            // support nulls
            return subCatid == null 
                ? queryable.Where(l => l.SubCatid == null) 
                : queryable.Where(l => l.SubCatid == subCatid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.SubCatid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subCatid">SubCatid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> BySubCatid(this IQueryable<Abeced.Data.LookupCategory> queryable, ContainmentOperator containmentOperator, System.String subCatid)
        {
            if (subCatid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("subCatid", "Parameter 'subCatid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.SubCatid.Contains(subCatid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.SubCatid.StartsWith(subCatid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.SubCatid.EndsWith(subCatid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.SubCatid.Contains(subCatid) == false);
                case ContainmentOperator.NotEquals:
                    return subCatid == null 
                        ? queryable.Where(l => l.SubCatid != null) 
                        : queryable.Where(l => l.SubCatid != subCatid);
                default:
                    return subCatid == null 
                        ? queryable.Where(l => l.SubCatid == null) 
                        : queryable.Where(l => l.SubCatid == subCatid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.SubCatid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subCatid">SubCatid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> BySubCatid(this IQueryable<Abeced.Data.LookupCategory> queryable, System.String subCatid, params System.String[] additionalValues)
        {
            var subCatidList = new List<System.String> { subCatid };

            if (additionalValues != null)
                subCatidList.AddRange(additionalValues);
            else
                subCatidList.Add(null);

            if (subCatidList.Count == 1)
                return queryable.BySubCatid(subCatidList[0]);

            return queryable.BySubCatid(subCatidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.SubCatid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> BySubCatid(this IQueryable<Abeced.Data.LookupCategory> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.LookupCategory, bool>("SubCatid", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByLastupdate(this IQueryable<Abeced.Data.LookupCategory> queryable, System.DateTime? lastupdate)
        {
            // support nulls
            return lastupdate == null 
                ? queryable.Where(l => l.Lastupdate == null) 
                : queryable.Where(l => l.Lastupdate == lastupdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByLastupdate(this IQueryable<Abeced.Data.LookupCategory> queryable, ComparisonOperator comparisonOperator, System.DateTime? lastupdate)
        {
            if (lastupdate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lastupdate", "Parameter 'lastupdate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.Lastupdate > lastupdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.Lastupdate >= lastupdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.Lastupdate < lastupdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.Lastupdate <= lastupdate);
                case ComparisonOperator.NotEquals:
                    return lastupdate == null 
                        ? queryable.Where(l => l.Lastupdate != null) 
                        : queryable.Where(l => l.Lastupdate != lastupdate);
                default:
                    return lastupdate == null 
                        ? queryable.Where(l => l.Lastupdate == null) 
                        : queryable.Where(l => l.Lastupdate == lastupdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastupdate">Lastupdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByLastupdate(this IQueryable<Abeced.Data.LookupCategory> queryable, System.DateTime? lastupdate, params System.DateTime?[] additionalValues)
        {
            var lastupdateList = new List<System.DateTime?> { lastupdate };

            if (additionalValues != null)
                lastupdateList.AddRange(additionalValues);
            else
                lastupdateList.Add(null);

            if (lastupdateList.Count == 1)
                return queryable.ByLastupdate(lastupdateList[0]);

            return queryable.ByLastupdate(lastupdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.Lastupdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByLastupdate(this IQueryable<Abeced.Data.LookupCategory> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.LookupCategory, bool>("Lastupdate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.CatImg"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catImg">CatImg to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatImg(this IQueryable<Abeced.Data.LookupCategory> queryable, System.String catImg)
        {
            return queryable.Where(l => l.CatImg == catImg);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.CatImg"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catImg">CatImg to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatImg(this IQueryable<Abeced.Data.LookupCategory> queryable, ContainmentOperator containmentOperator, System.String catImg)
        {
            if (catImg == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("catImg", "Parameter 'catImg' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.CatImg.Contains(catImg));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.CatImg.StartsWith(catImg));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.CatImg.EndsWith(catImg));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.CatImg.Contains(catImg) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.CatImg != catImg);
                default:
                    return queryable.Where(l => l.CatImg == catImg);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.CatImg"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="catImg">CatImg to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatImg(this IQueryable<Abeced.Data.LookupCategory> queryable, System.String catImg, params System.String[] additionalValues)
        {
            var catImgList = new List<System.String> { catImg };

            if (additionalValues != null)
                catImgList.AddRange(additionalValues);

            if (catImgList.Count == 1)
                return queryable.ByCatImg(catImgList[0]);

            return queryable.ByCatImg(catImgList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.LookupCategory.CatImg"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.LookupCategory> ByCatImg(this IQueryable<Abeced.Data.LookupCategory> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(l => values.Contains(l.CatImg));
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
