#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Abeced.Data
{
    /// <summary>
    /// The query extension class for Invitation.
    /// </summary>
    public static partial class InvitationExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Abeced.Data.Invitation GetByKey(this IQueryable<Abeced.Data.Invitation> queryable
            , System.String inviteid
            )
        {
            return queryable
                .Where(i => i.Inviteid == inviteid)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Inviteid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteid">Inviteid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteid(this IQueryable<Abeced.Data.Invitation> queryable, System.String inviteid)
        {
            return queryable.Where(i => i.Inviteid == inviteid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Inviteid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteid">Inviteid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteid(this IQueryable<Abeced.Data.Invitation> queryable, ContainmentOperator containmentOperator, System.String inviteid)
        {
            if (inviteid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("inviteid", "Parameter 'inviteid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Inviteid.Contains(inviteid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Inviteid.StartsWith(inviteid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Inviteid.EndsWith(inviteid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Inviteid.Contains(inviteid) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.Inviteid != inviteid);
                default:
                    return queryable.Where(i => i.Inviteid == inviteid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Inviteid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteid">Inviteid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteid(this IQueryable<Abeced.Data.Invitation> queryable, System.String inviteid, params System.String[] additionalValues)
        {
            var inviteidList = new List<System.String> { inviteid };

            if (additionalValues != null)
                inviteidList.AddRange(additionalValues);

            if (inviteidList.Count == 1)
                return queryable.ByInviteid(inviteidList[0]);

            return queryable.ByInviteid(inviteidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Inviteid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteid(this IQueryable<Abeced.Data.Invitation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.Inviteid));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByUserid(this IQueryable<Abeced.Data.Invitation> queryable, System.String userid)
        {
            return queryable.Where(i => i.Userid == userid);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByUserid(this IQueryable<Abeced.Data.Invitation> queryable, ContainmentOperator containmentOperator, System.String userid)
        {
            if (userid == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userid", "Parameter 'userid' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Userid.Contains(userid));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Userid.StartsWith(userid));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Userid.EndsWith(userid));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Userid.Contains(userid) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.Userid != userid);
                default:
                    return queryable.Where(i => i.Userid == userid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userid">Userid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByUserid(this IQueryable<Abeced.Data.Invitation> queryable, System.String userid, params System.String[] additionalValues)
        {
            var useridList = new List<System.String> { userid };

            if (additionalValues != null)
                useridList.AddRange(additionalValues);

            if (useridList.Count == 1)
                return queryable.ByUserid(useridList[0]);

            return queryable.ByUserid(useridList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Userid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByUserid(this IQueryable<Abeced.Data.Invitation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.Userid));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByEmail(this IQueryable<Abeced.Data.Invitation> queryable, System.String email)
        {
            return queryable.Where(i => i.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByEmail(this IQueryable<Abeced.Data.Invitation> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.Email != email);
                default:
                    return queryable.Where(i => i.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByEmail(this IQueryable<Abeced.Data.Invitation> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByEmail(this IQueryable<Abeced.Data.Invitation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.Email));
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.InviteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteDate">InviteDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteDate(this IQueryable<Abeced.Data.Invitation> queryable, System.DateTime? inviteDate)
        {
            // support nulls
            return inviteDate == null 
                ? queryable.Where(i => i.InviteDate == null) 
                : queryable.Where(i => i.InviteDate == inviteDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.InviteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteDate">InviteDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteDate(this IQueryable<Abeced.Data.Invitation> queryable, ComparisonOperator comparisonOperator, System.DateTime? inviteDate)
        {
            if (inviteDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("inviteDate", "Parameter 'inviteDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.InviteDate > inviteDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.InviteDate >= inviteDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.InviteDate < inviteDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.InviteDate <= inviteDate);
                case ComparisonOperator.NotEquals:
                    return inviteDate == null 
                        ? queryable.Where(i => i.InviteDate != null) 
                        : queryable.Where(i => i.InviteDate != inviteDate);
                default:
                    return inviteDate == null 
                        ? queryable.Where(i => i.InviteDate == null) 
                        : queryable.Where(i => i.InviteDate == inviteDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.InviteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteDate">InviteDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteDate(this IQueryable<Abeced.Data.Invitation> queryable, System.DateTime? inviteDate, params System.DateTime?[] additionalValues)
        {
            var inviteDateList = new List<System.DateTime?> { inviteDate };

            if (additionalValues != null)
                inviteDateList.AddRange(additionalValues);
            else
                inviteDateList.Add(null);

            if (inviteDateList.Count == 1)
                return queryable.ByInviteDate(inviteDateList[0]);

            return queryable.ByInviteDate(inviteDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.InviteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteDate(this IQueryable<Abeced.Data.Invitation> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Invitation, bool>("InviteDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.InviteAccept"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteAccept">InviteAccept to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteAccept(this IQueryable<Abeced.Data.Invitation> queryable, System.Boolean? inviteAccept)
        {
            // support nulls
            return inviteAccept == null 
                ? queryable.Where(i => i.InviteAccept == null) 
                : queryable.Where(i => i.InviteAccept == inviteAccept);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.InviteAccept"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteAccept">InviteAccept to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteAccept(this IQueryable<Abeced.Data.Invitation> queryable, ComparisonOperator comparisonOperator, System.Boolean? inviteAccept)
        {
            if (inviteAccept == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("inviteAccept", "Parameter 'inviteAccept' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return inviteAccept == null 
                        ? queryable.Where(i => i.InviteAccept != null) 
                        : queryable.Where(i => i.InviteAccept != inviteAccept);
                default:
                    return inviteAccept == null 
                        ? queryable.Where(i => i.InviteAccept == null) 
                        : queryable.Where(i => i.InviteAccept == inviteAccept);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.InviteAccept"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inviteAccept">InviteAccept to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteAccept(this IQueryable<Abeced.Data.Invitation> queryable, System.Boolean? inviteAccept, params System.Boolean?[] additionalValues)
        {
            var inviteAcceptList = new List<System.Boolean?> { inviteAccept };

            if (additionalValues != null)
                inviteAcceptList.AddRange(additionalValues);
            else
                inviteAcceptList.Add(null);

            if (inviteAcceptList.Count == 1)
                return queryable.ByInviteAccept(inviteAcceptList[0]);

            return queryable.ByInviteAccept(inviteAcceptList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.InviteAccept"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByInviteAccept(this IQueryable<Abeced.Data.Invitation> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Invitation, bool>("InviteAccept", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.AcceptedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="acceptedDate">AcceptedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByAcceptedDate(this IQueryable<Abeced.Data.Invitation> queryable, System.DateTime? acceptedDate)
        {
            // support nulls
            return acceptedDate == null 
                ? queryable.Where(i => i.AcceptedDate == null) 
                : queryable.Where(i => i.AcceptedDate == acceptedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.AcceptedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="acceptedDate">AcceptedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByAcceptedDate(this IQueryable<Abeced.Data.Invitation> queryable, ComparisonOperator comparisonOperator, System.DateTime? acceptedDate)
        {
            if (acceptedDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("acceptedDate", "Parameter 'acceptedDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.AcceptedDate > acceptedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.AcceptedDate >= acceptedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.AcceptedDate < acceptedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.AcceptedDate <= acceptedDate);
                case ComparisonOperator.NotEquals:
                    return acceptedDate == null 
                        ? queryable.Where(i => i.AcceptedDate != null) 
                        : queryable.Where(i => i.AcceptedDate != acceptedDate);
                default:
                    return acceptedDate == null 
                        ? queryable.Where(i => i.AcceptedDate == null) 
                        : queryable.Where(i => i.AcceptedDate == acceptedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.AcceptedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="acceptedDate">AcceptedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByAcceptedDate(this IQueryable<Abeced.Data.Invitation> queryable, System.DateTime? acceptedDate, params System.DateTime?[] additionalValues)
        {
            var acceptedDateList = new List<System.DateTime?> { acceptedDate };

            if (additionalValues != null)
                acceptedDateList.AddRange(additionalValues);
            else
                acceptedDateList.Add(null);

            if (acceptedDateList.Count == 1)
                return queryable.ByAcceptedDate(acceptedDateList[0]);

            return queryable.ByAcceptedDate(acceptedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Abeced.Data.Invitation.AcceptedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Abeced.Data.Invitation> ByAcceptedDate(this IQueryable<Abeced.Data.Invitation> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Abeced.Data.Invitation, bool>("AcceptedDate", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}

#pragma warning restore 1591
